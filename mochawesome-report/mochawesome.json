{
  "stats": {
    "suites": 25,
    "tests": 62,
    "passes": 62,
    "pending": 0,
    "failures": 0,
    "start": "2019-05-21T23:17:58.165Z",
    "end": "2019-05-21T23:17:59.109Z",
    "duration": 944,
    "testsRegistered": 62,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "e8ebdd14-ff38-455c-9936-0ecb5605f206",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "6dff46f7-3bcd-421c-9a2b-e24bb0ff7837",
        "title": "categorias, test funcional",
        "fullFile": "/Users/abrahan/Desktop/JS/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "categorias, test funcional \"before each\" hook",
            "timedOut": false,
            "duration": 11,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonCategorias_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      categoriaIngresos: store.state.categoriaIngresos,\n      categoriaEgresos: store.state.categoriaEgresos\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "fa185175-cac1-4656-8a92-572c26bef3e0",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Crear categoria Ingreso, funcional",
            "fullTitle": "categorias, test funcional Crear categoria Ingreso, funcional",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const categoriaNueva = ['Ventas']\nwrapper.vm.tipo = 'Ingreso'\nwrapper.vm.nombre = categoriaNueva\nwrapper.vm.agregar()\nassert.exists(store.state.categoriaIngresos.find(categoria => categoria === categoriaNueva),\n  'No se encontro la nueva cateogira')",
            "err": {},
            "isRoot": false,
            "uuid": "ddafd151-af74-43d1-8f3b-42b6ffb28f56",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Crear categoria Egreso, funcional",
            "fullTitle": "categorias, test funcional Crear categoria Egreso, funcional",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const categoriaNueva = ['Compras']\nwrapper.vm.tipo = 'Egreso'\nwrapper.vm.nombre = categoriaNueva\nwrapper.vm.agregar()\nassert.exists(store.state.categoriaEgresos.find(categoria => categoria === categoriaNueva),\n  'No se encontro la nueva cateogira')",
            "err": {},
            "isRoot": false,
            "uuid": "0b05cb15-0a89-4cfd-b3e1-2540b7d22b3b",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "ddafd151-af74-43d1-8f3b-42b6ffb28f56",
          "0b05cb15-0a89-4cfd-b3e1-2540b7d22b3b"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 17,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "569b978c-1939-4bf9-a841-eb02988837b8",
        "title": "categorias render test",
        "fullFile": "/Users/abrahan/Desktop/JS/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "categorias render test \"before each\" hook",
            "timedOut": false,
            "duration": 8,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonCategorias_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      categoriaIngresos: store.state.categoriaIngresos,\n      categoriaEgresos: store.state.categoriaEgresos\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "fd9c6845-67ec-4f1f-83c6-965fd3923f7c",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "elementos formulario renderizan",
            "fullTitle": "categorias render test elementos formulario renderizan",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.find('#selectorCategoria').exists(), true)\nassert.equal(wrapper.find('#nombreCategoria').exists(), true)\nassert.equal(wrapper.find('#agregarCategoria').exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "3ec8cfcf-ed62-452d-af79-884d4fcb9012",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "3ec8cfcf-ed62-452d-af79-884d4fcb9012"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 7,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b4e5b0bc-a490-4016-9438-1ce64eedeb71",
        "title": "Datos iniciales categorias",
        "fullFile": "/Users/abrahan/Desktop/JS/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Datos iniciales categorias \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()",
            "err": {},
            "isRoot": false,
            "uuid": "390b383b-2d88-46db-a3aa-ae6413a2b264",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Deberia tener 3 categorias de ingreso iniciales",
            "fullTitle": "Datos iniciales categorias Deberia tener 3 categorias de ingreso iniciales",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(3, store.state.categoriaIngresos.length,\n  'numero de categorias de ingresos: ' + store.state.categoriaIngresos.length)\nassert.exists(store.state.categoriaIngresos.find(categoria => categoria === 'Salario'),\n  'No esiste la categoria Salarios')\nassert.exists(store.state.categoriaIngresos.find(categoria => categoria === 'Transferencia'),\n  'No esiste la categoria Transferencia')\nassert.exists(store.state.categoriaIngresos.find(categoria => categoria === 'Otros'),\n  'No esiste la categoria Otros')",
            "err": {},
            "isRoot": false,
            "uuid": "ce57a49b-1f3a-492b-a3d3-90dd6ca7046e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Deberia tener 3 categorias de egreso iniciales",
            "fullTitle": "Datos iniciales categorias Deberia tener 3 categorias de egreso iniciales",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(3, store.state.categoriaEgresos.length,\n  'numero de categorias de egresos: ' + store.state.categoriaEgresos.length)\nassert.exists(store.state.categoriaEgresos.find(categoria => categoria === 'Expensas'),\n  'No esiste la categoria Expensas')\nassert.exists(store.state.categoriaEgresos.find(categoria => categoria === 'Transferencia'),\n  'No esiste la categoria Transferencia')\nassert.exists(store.state.categoriaEgresos.find(categoria => categoria === 'Otros'),\n  'No esiste la categoria Otros')",
            "err": {},
            "isRoot": false,
            "uuid": "2dfe46f1-1f2e-407e-85d0-c7bbeebbfe96",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "ce57a49b-1f3a-492b-a3d3-90dd6ca7046e",
          "2dfe46f1-1f2e-407e-85d0-c7bbeebbfe96"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "074612b5-1ea5-4f53-8475-fd6ef505d0ab",
        "title": "Categorias invalidas",
        "fullFile": "/Users/abrahan/Desktop/JS/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Categorias invalidas \"before each\" hook",
            "timedOut": false,
            "duration": 11,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonCategorias_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      categoriaIngresos: store.state.categoriaIngresos,\n      categoriaEgresos: store.state.categoriaEgresos\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "68521aa5-97cc-4156-9af3-58100f1fa0f2",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "no se puede crear categorias de ingreso con nombre vacio",
            "fullTitle": "Categorias invalidas no se puede crear categorias de ingreso con nombre vacio",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.tipo = 'Ingreso'\nwrapper.vm.nombre = ''\nwrapper.vm.agregar()\nassert.notExists(store.state.categoriaIngresos.find(categoria => categoria === ''))",
            "err": {},
            "isRoot": false,
            "uuid": "7f2cd704-a3d2-4e25-aa02-2c1831da99a7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "no se puede crear categorias de egreso con nombre vacio",
            "fullTitle": "Categorias invalidas no se puede crear categorias de egreso con nombre vacio",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.tipo = 'Egreso'\nwrapper.vm.nombre = ''\nwrapper.vm.agregar()\nassert.notExists(store.state.categoriaEgresos.find(categoria => categoria === ''))",
            "err": {},
            "isRoot": false,
            "uuid": "292adbfc-301d-40fa-b29d-bb7b4ad43cde",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "No se pueden agregar categorias de ingreso ya existentes",
            "fullTitle": "Categorias invalidas No se pueden agregar categorias de ingreso ya existentes",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const categoriaExistente = 'Salario'\nconst cantidadInicial = store.state.categoriaEgresos.length\nwrapper.vm.tipo = 'Ingreso'\nwrapper.vm.nombre = categoriaExistente\nwrapper.vm.agregar()\nassert.equal(store.state.categoriaIngresos.length, cantidadInicial)",
            "err": {},
            "isRoot": false,
            "uuid": "389f1af2-678c-4bbb-a1a9-8419aa6b2d9c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "No se pueden agregar categorias de egreso ya existentes",
            "fullTitle": "Categorias invalidas No se pueden agregar categorias de egreso ya existentes",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const categoriaExistente = 'Expensas'\nconst cantidadInicial = store.state.categoriaEgresos.length\nwrapper.vm.tipo = 'Egreso'\nwrapper.vm.nombre = categoriaExistente\nwrapper.vm.agregar()\nassert.equal(store.state.categoriaEgresos.length, cantidadInicial)",
            "err": {},
            "isRoot": false,
            "uuid": "85836d13-197f-4b58-a8b7-b8761f2cebbe",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "no se puede crear categorias sin tipo",
            "fullTitle": "Categorias invalidas no se puede crear categorias sin tipo",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const nombreCategoria = 'Supermercado'\nwrapper.vm.tipo = ''\nwrapper.vm.nombre = nombreCategoria\nwrapper.vm.agregar()\nassert.notExists(store.state.categoriaIngresos.find(categoria => categoria === nombreCategoria))\nassert.notExists(store.state.categoriaEgresos.find(categoria => categoria === nombreCategoria))",
            "err": {},
            "isRoot": false,
            "uuid": "e4382b58-da4b-445d-b61f-5240999a64ea",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "7f2cd704-a3d2-4e25-aa02-2c1831da99a7",
          "292adbfc-301d-40fa-b29d-bb7b4ad43cde",
          "389f1af2-678c-4bbb-a1a9-8419aa6b2d9c",
          "85836d13-197f-4b58-a8b7-b8761f2cebbe",
          "e4382b58-da4b-445d-b61f-5240999a64ea"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 23,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9525bcb8-d965-4828-94f9-094570466b5b",
        "title": "Ingresos, funcional",
        "fullFile": "/Users/abrahan/Desktop/JS/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Ingresos, funcional \"before each\" hook",
            "timedOut": false,
            "duration": 15,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/' })\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransacciones__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      tipo: 'Ingreso',\n      cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/' },\n      categorias: store.state.categoriaIngresos }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "d0fadb9c-eb25-4c2b-bd12-5111b2fd9e7d",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Agregar Ingreso",
            "fullTitle": "Ingresos, funcional Agregar Ingreso",
            "timedOut": false,
            "duration": 24,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: 120, categoria: 'Salario' }\nconst saldoInicial = 0\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.exists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransaccion.cuenta) &&\n  (ingreso.fecha === datosTransaccion.fecha) &&\n  (ingreso.categoria === datosTransaccion.categoria) &&\n  (ingreso.monto === datosTransaccion.monto)\n}), 'No se encontro el ingreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  (saldoInicial + datosTransaccion.monto), 'No se actualiza el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "352fe7a4-3854-4c78-9aac-01f62d9ce24f",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "352fe7a4-3854-4c78-9aac-01f62d9ce24f"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 24,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9f63948e-c1f8-4d7a-9518-c2cb50eee540",
        "title": "Egresos, funcional",
        "fullFile": "/Users/abrahan/Desktop/JS/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Egresos, funcional \"before each\" hook",
            "timedOut": false,
            "duration": 9,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/' })\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransacciones__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      tipo: 'Egreso',\n      cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 200, route: '/' },\n      categorias: store.state.categoriaEgresos }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "27b8f279-e893-4ef4-989a-d2f48d56ed37",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Agregar Egreso",
            "fullTitle": "Egresos, funcional Agregar Egreso",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: 100, categoria: 'Expensas' }\nconst saldoInicial = 200\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.exists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransaccion.cuenta) &&\n  (egreso.fecha === datosTransaccion.fecha) &&\n  (egreso.categoria === datosTransaccion.categoria) &&\n  (egreso.monto === datosTransaccion.monto)\n}), 'No se encontro el egreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  (saldoInicial - datosTransaccion.monto), 'No se actualiza el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "c4f72d01-a595-46a0-a78e-4103186845fd",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "c4f72d01-a595-46a0-a78e-4103186845fd"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 14,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1a9974d1-25ba-4fac-85e6-71332b2a4831",
        "title": "Ingresos invalidos",
        "fullFile": "/Users/abrahan/Desktop/JS/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Ingresos invalidos \"before each\" hook",
            "timedOut": false,
            "duration": 9,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/' })\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransacciones__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      tipo: 'Ingreso',\n      cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/' },\n      categorias: store.state.categoriaIngresos }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "03f7c505-b2ec-4ce4-be3a-2f86cfb79181",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "categoria vacia",
            "fullTitle": "Ingresos invalidos categoria vacia",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: 100, categoria: '' }\nconst saldoInicial = 0\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransaccion.cuenta) &&\n  (ingreso.fecha === datosTransaccion.fecha) &&\n  (ingreso.categoria === datosTransaccion.categoria) &&\n  (ingreso.monto === datosTransaccion.monto)\n}), 'Se agrego el ingreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "07d3bdb5-3c65-48c7-a6b3-211ea39d4091",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "fecha vacia",
            "fullTitle": "Ingresos invalidos fecha vacia",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '', monto: 100, categoria: 'Salario' }\nconst saldoInicial = 0\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransaccion.cuenta) &&\n  (ingreso.fecha === datosTransaccion.fecha) &&\n  (ingreso.categoria === datosTransaccion.categoria) &&\n  (ingreso.monto === datosTransaccion.monto)\n}), 'Se agrego el ingreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "674b3228-178a-4e29-846a-ae498a5f30d2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "monto nulo",
            "fullTitle": "Ingresos invalidos monto nulo",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: 0, categoria: 'Salario' }\nconst saldoInicial = 0\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransaccion.cuenta) &&\n  (ingreso.fecha === datosTransaccion.fecha) &&\n  (ingreso.categoria === datosTransaccion.categoria) &&\n  (ingreso.monto === datosTransaccion.monto)\n}), 'Se agrego el ingreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "4f3cf2e0-8bbe-4915-a346-7f7aeb04827e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "monto negativo",
            "fullTitle": "Ingresos invalidos monto negativo",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: -50, categoria: 'Salario' }\nconst saldoInicial = 0\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransaccion.cuenta) &&\n  (ingreso.fecha === datosTransaccion.fecha) &&\n  (ingreso.categoria === datosTransaccion.categoria) &&\n  (ingreso.monto === datosTransaccion.monto)\n}), 'Se agrego el ingreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "16725ec2-d5af-4277-a49c-ce75eed83468",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "categoria inexistente",
            "fullTitle": "Ingresos invalidos categoria inexistente",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: 50, categoria: 'Tienda' }\nconst saldoInicial = 0\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransaccion.cuenta) &&\n  (ingreso.fecha === datosTransaccion.fecha) &&\n  (ingreso.categoria === datosTransaccion.categoria) &&\n  (ingreso.monto === datosTransaccion.monto)\n}), 'Se agrego el ingreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "969fe3d6-8be9-4897-a265-3437ebb9bb89",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "07d3bdb5-3c65-48c7-a6b3-211ea39d4091",
          "674b3228-178a-4e29-846a-ae498a5f30d2",
          "4f3cf2e0-8bbe-4915-a346-7f7aeb04827e",
          "16725ec2-d5af-4277-a49c-ce75eed83468",
          "969fe3d6-8be9-4897-a265-3437ebb9bb89"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 71,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ea372e3c-d495-4348-8a2b-d5efcaaef2c7",
        "title": "Egresos invalidos",
        "fullFile": "/Users/abrahan/Desktop/JS/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Egresos invalidos \"before each\" hook",
            "timedOut": false,
            "duration": 11,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'ahorros', fondos: 100, route: '/' })\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransacciones__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      tipo: 'Egreso',\n      cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 100, route: '/' },\n      categorias: store.state.categoriaEgresos }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "e72968cc-97b3-4c97-9bc2-f530ecc29f33",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "categoria vacia",
            "fullTitle": "Egresos invalidos categoria vacia",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: 50, categoria: '' }\nconst saldoInicial = 100\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransaccion.cuenta) &&\n  (egreso.fecha === datosTransaccion.fecha) &&\n  (egreso.categoria === datosTransaccion.categoria) &&\n  (egreso.monto === datosTransaccion.monto)\n}), 'Se agrego el egreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "6c959013-8b1b-4c62-9acb-327e7621d0c2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "fecha vacia",
            "fullTitle": "Egresos invalidos fecha vacia",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '', monto: 50, categoria: 'Expensas' }\nconst saldoInicial = 100\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransaccion.cuenta) &&\n  (egreso.fecha === datosTransaccion.fecha) &&\n  (egreso.categoria === datosTransaccion.categoria) &&\n  (egreso.monto === datosTransaccion.monto)\n}), 'Se agrego el egreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "245a58d6-31b5-4785-90de-aa27655535a8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "monto nulo",
            "fullTitle": "Egresos invalidos monto nulo",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: 0, categoria: 'Expensas' }\nconst saldoInicial = 100\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransaccion.cuenta) &&\n  (egreso.fecha === datosTransaccion.fecha) &&\n  (egreso.categoria === datosTransaccion.categoria) &&\n  (egreso.monto === datosTransaccion.monto)\n}), 'Se agrego el egreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "d6a8c4cc-04a2-4c4d-91a1-ca256857bde2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "monto negativo",
            "fullTitle": "Egresos invalidos monto negativo",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: -50, categoria: 'Expensas' }\nconst saldoInicial = 100\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransaccion.cuenta) &&\n  (egreso.fecha === datosTransaccion.fecha) &&\n  (egreso.categoria === datosTransaccion.categoria) &&\n  (egreso.monto === datosTransaccion.monto)\n}), 'Se agrego el egreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "7395106b-a1ee-47aa-805c-2aff251b3e2d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "monto mayor al saldo",
            "fullTitle": "Egresos invalidos monto mayor al saldo",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: 200, categoria: 'Expensas' }\nconst saldoInicial = 100\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransaccion.cuenta) &&\n  (egreso.fecha === datosTransaccion.fecha) &&\n  (egreso.categoria === datosTransaccion.categoria) &&\n  (egreso.monto === datosTransaccion.monto)\n}), 'Se agrego el egreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "015c8cc3-3fe8-457c-ad7c-9e27089597c9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "categoria inexistente",
            "fullTitle": "Egresos invalidos categoria inexistente",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: 50, categoria: 'Tienda' }\nconst saldoInicial = 100\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransaccion.cuenta) &&\n  (egreso.fecha === datosTransaccion.fecha) &&\n  (egreso.categoria === datosTransaccion.categoria) &&\n  (egreso.monto === datosTransaccion.monto)\n}), 'Se agrego el egreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "bef7336c-d7b7-444d-a263-984453691e9c",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "6c959013-8b1b-4c62-9acb-327e7621d0c2",
          "245a58d6-31b5-4785-90de-aa27655535a8",
          "d6a8c4cc-04a2-4c4d-91a1-ca256857bde2",
          "7395106b-a1ee-47aa-805c-2aff251b3e2d",
          "015c8cc3-3fe8-457c-ad7c-9e27089597c9",
          "bef7336c-d7b7-444d-a263-984453691e9c"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 73,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3a52dbc8-8273-4a82-b1d9-6e4e1dc25546",
        "title": "Render test, transacciones",
        "fullFile": "/Users/abrahan/Desktop/JS/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Render test, transacciones \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/' })",
            "err": {},
            "isRoot": false,
            "uuid": "04c7ee75-1ce3-4cbc-93e5-bacca62ab1d1",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "test ingreso",
            "fullTitle": "Render test, transacciones test ingreso",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransacciones__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      tipo: 'Ingreso',\n      cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/' },\n      categorias: store.state.categoriaIngresos }\n  })\nassert.equal(wrapper.find('#selectorIngreso').exists(), true)\nassert.equal(wrapper.find('#montoIngreso').exists(), true)\nassert.equal(wrapper.find('#menuCalendarioIngreso').exists(), true)\nassert.equal(wrapper.find('#okCalendarioIngreso').exists(), true)\nassert.equal(wrapper.find('#agregarIngreso').exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "5bee6e44-508d-4a1f-a872-cb6177588c3e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "test egreso",
            "fullTitle": "Render test, transacciones test egreso",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransacciones__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      tipo: 'Egreso',\n      cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/' },\n      categorias: store.state.categoriaIngresos }\n  })\nassert.equal(wrapper.find('#selectorEgreso').exists(), true)\nassert.equal(wrapper.find('#montoEgreso').exists(), true)\nassert.equal(wrapper.find('#menuCalendarioEgreso').exists(), true)\nassert.equal(wrapper.find('#okCalendarioEgreso').exists(), true)\nassert.equal(wrapper.find('#agregarEgreso').exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "85c00f34-d121-40e7-b42d-fdead56fa010",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "5bee6e44-508d-4a1f-a872-cb6177588c3e",
          "85c00f34-d121-40e7-b42d-fdead56fa010"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 21,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e5455b7b-2f40-46cb-a7ea-383b475b10df",
        "title": "Transferencia, funcional",
        "fullFile": "/Users/abrahan/Desktop/JS/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Transferencia, funcional \"before each\" hook",
            "timedOut": false,
            "duration": 8,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'ahorros', fondos: 100, route: '/' })\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'comida', fondos: 0, route: '/' })\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransferencia__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store, propsData: { cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 100, route: '/' } }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "b60641a2-6353-4b68-886b-3d865ef20b63",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Agregar Transferencia",
            "fullTitle": "Transferencia, funcional Agregar Transferencia",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransferencia = {\n  cuentaDestino: 'comida',\n  fecha: '2019-05-06',\n  monto: 50,\n  categoria: 'Transferencia',\n  cuentaOrigen: 'ahorros',\n  saldoOrigenInicial: 100,\n  saldoDestinoInicial: 0\n}\nwrapper.vm.monto = datosTransferencia.monto\nwrapper.vm.fecha = datosTransferencia.fecha\nwrapper.vm.cuentaDestino = datosTransferencia.cuentaDestino\nwrapper.vm.transferir()\nassert.exists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransferencia.cuentaDestino) &&\n  (ingreso.fecha === datosTransferencia.fecha) &&\n  (ingreso.categoria === datosTransferencia.categoria) &&\n  (ingreso.monto === datosTransferencia.monto)\n}), 'No se encontro el ingreso en la cuenta destino' + store.state.egresos.length)\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaDestino).fondos,\n  (datosTransferencia.saldoDestinoInicial + datosTransferencia.monto),\n  'No se actualiza el saldo de la cuenta Destino')\nassert.exists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransferencia.cuentaOrigen) &&\n  (egreso.fecha === datosTransferencia.fecha) &&\n  (egreso.categoria === datosTransferencia.categoria) &&\n  (egreso.monto === datosTransferencia.monto)\n}), 'No se encontro el egreso en la cuenta origen')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaOrigen).fondos,\n  (datosTransferencia.saldoOrigenInicial - datosTransferencia.monto),\n  'No se actualiza el saldo de la cuenta origen')",
            "err": {},
            "isRoot": false,
            "uuid": "f1942cf2-94f7-46fe-8590-ab54011cd091",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "f1942cf2-94f7-46fe-8590-ab54011cd091"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 12,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1dbc5a6f-6831-443c-89ee-d911499e1120",
        "title": "Transferencias invalidas",
        "fullFile": "/Users/abrahan/Desktop/JS/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Transferencias invalidas \"before each\" hook",
            "timedOut": false,
            "duration": 9,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'ahorros', fondos: 100, route: '/' })\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'comida', fondos: 0, route: '/' })\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransferencia__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store, propsData: { cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 100, route: '/' } }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "e3f0fb58-5e7a-488a-a919-256b690e10e1",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Fecha vacia",
            "fullTitle": "Transferencias invalidas Fecha vacia",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransferencia = {\n  cuentaDestino: 'comida',\n  fecha: '',\n  monto: 50,\n  categoria: 'Transferencia',\n  cuentaOrigen: 'ahorros',\n  saldoOrigenInicial: 100,\n  saldoDestinoInicial: 0\n}\nwrapper.vm.monto = datosTransferencia.monto\nwrapper.vm.fecha = datosTransferencia.fecha\nwrapper.vm.cuentaDestino = datosTransferencia.cuentaDestino\nwrapper.vm.transferir()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransferencia.cuentaDestino) &&\n  (ingreso.fecha === datosTransferencia.fecha) &&\n  (ingreso.categoria === datosTransferencia.categoria) &&\n  (ingreso.monto === datosTransferencia.monto)\n}), 'Se encontro el ingreso en la cuenta destino')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaDestino).fondos,\n  (datosTransferencia.saldoDestinoInicial),\n  'Se actualiza el saldo de la cuenta Destino')\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransferencia.cuentaOrigen) &&\n  (egreso.fecha === datosTransferencia.fecha) &&\n  (egreso.categoria === datosTransferencia.categoria) &&\n  (egreso.monto === datosTransferencia.monto)\n}), 'Se encontro el egreso en la cuenta origen')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaOrigen).fondos,\n  (datosTransferencia.saldoOrigenInicial),\n  'Se actualiza el saldo de la cuenta origen')",
            "err": {},
            "isRoot": false,
            "uuid": "d8e13fd6-4882-4709-be19-6fb4ddc0699c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Cuenta destino vacia",
            "fullTitle": "Transferencias invalidas Cuenta destino vacia",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransferencia = {\n  cuentaDestino: '',\n  fecha: '2019-05-06',\n  monto: 50,\n  categoria: 'Transferencia',\n  cuentaOrigen: 'ahorros',\n  saldoOrigenInicial: 100,\n  saldoDestinoInicial: 0\n}\nwrapper.vm.monto = datosTransferencia.monto\nwrapper.vm.fecha = datosTransferencia.fecha\nwrapper.vm.cuentaDestino = datosTransferencia.cuentaDestino\nwrapper.vm.transferir()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransferencia.cuentaDestino) &&\n  (ingreso.fecha === datosTransferencia.fecha) &&\n  (ingreso.categoria === datosTransferencia.categoria) &&\n  (ingreso.monto === datosTransferencia.monto)\n}), 'Se encontro el ingreso en la cuenta destino')\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransferencia.cuentaOrigen) &&\n  (egreso.fecha === datosTransferencia.fecha) &&\n  (egreso.categoria === datosTransferencia.categoria) &&\n  (egreso.monto === datosTransferencia.monto)\n}), 'Se encontro el egreso en la cuenta origen')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaOrigen).fondos,\n  (datosTransferencia.saldoOrigenInicial),\n  'Se actualiza el saldo de la cuenta origen')",
            "err": {},
            "isRoot": false,
            "uuid": "9bdcd549-e236-44ff-8b7e-4e68fdfece8c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "monto nulo",
            "fullTitle": "Transferencias invalidas monto nulo",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransferencia = {\n  cuentaDestino: 'comida',\n  fecha: '2019-05-06',\n  monto: 0,\n  categoria: 'Transferencia',\n  cuentaOrigen: 'ahorros',\n  saldoOrigenInicial: 100,\n  saldoDestinoInicial: 0\n}\nwrapper.vm.monto = datosTransferencia.monto\nwrapper.vm.fecha = datosTransferencia.fecha\nwrapper.vm.cuentaDestino = datosTransferencia.cuentaDestino\nwrapper.vm.transferir()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransferencia.cuentaDestino) &&\n  (ingreso.fecha === datosTransferencia.fecha) &&\n  (ingreso.categoria === datosTransferencia.categoria) &&\n  (ingreso.monto === datosTransferencia.monto)\n}), 'Se encontro el ingreso en la cuenta destino')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaDestino).fondos,\n  (datosTransferencia.saldoDestinoInicial),\n  'Se actualiza el saldo de la cuenta Destino')\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransferencia.cuentaOrigen) &&\n  (egreso.fecha === datosTransferencia.fecha) &&\n  (egreso.categoria === datosTransferencia.categoria) &&\n  (egreso.monto === datosTransferencia.monto)\n}), 'Se encontro el egreso en la cuenta origen')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaOrigen).fondos,\n  (datosTransferencia.saldoOrigenInicial),\n  'Se actualiza el saldo de la cuenta origen')",
            "err": {},
            "isRoot": false,
            "uuid": "64dc3824-234e-4e7d-94fa-dc3f22b2d5bc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "monto negativo",
            "fullTitle": "Transferencias invalidas monto negativo",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransferencia = {\n  cuentaDestino: 'comida',\n  fecha: '2019-05-06',\n  monto: -30,\n  categoria: 'Transferencia',\n  cuentaOrigen: 'ahorros',\n  saldoOrigenInicial: 100,\n  saldoDestinoInicial: 0\n}\nwrapper.vm.monto = datosTransferencia.monto\nwrapper.vm.fecha = datosTransferencia.fecha\nwrapper.vm.cuentaDestino = datosTransferencia.cuentaDestino\nwrapper.vm.transferir()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransferencia.cuentaDestino) &&\n  (ingreso.fecha === datosTransferencia.fecha) &&\n  (ingreso.categoria === datosTransferencia.categoria) &&\n  (ingreso.monto === datosTransferencia.monto)\n}), 'Se encontro el ingreso en la cuenta destino')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaDestino).fondos,\n  (datosTransferencia.saldoDestinoInicial),\n  'Se actualiza el saldo de la cuenta Destino')\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransferencia.cuentaOrigen) &&\n  (egreso.fecha === datosTransferencia.fecha) &&\n  (egreso.categoria === datosTransferencia.categoria) &&\n  (egreso.monto === datosTransferencia.monto)\n}), 'Se encontro el egreso en la cuenta origen')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaOrigen).fondos,\n  (datosTransferencia.saldoOrigenInicial),\n  'Se actualiza el saldo de la cuenta origen')",
            "err": {},
            "isRoot": false,
            "uuid": "94055a80-aab8-4b80-a392-2e7161610dc2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "saldo insuficiente",
            "fullTitle": "Transferencias invalidas saldo insuficiente",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransferencia = {\n  cuentaDestino: 'comida',\n  fecha: '2019-05-06',\n  monto: 200,\n  categoria: 'Transferencia',\n  cuentaOrigen: 'ahorros',\n  saldoOrigenInicial: 100,\n  saldoDestinoInicial: 0\n}\nwrapper.vm.monto = datosTransferencia.monto\nwrapper.vm.fecha = datosTransferencia.fecha\nwrapper.vm.cuentaDestino = datosTransferencia.cuentaDestino\nwrapper.vm.transferir()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransferencia.cuentaDestino) &&\n  (ingreso.fecha === datosTransferencia.fecha) &&\n  (ingreso.categoria === datosTransferencia.categoria) &&\n  (ingreso.monto === datosTransferencia.monto)\n}), 'Se encontro el ingreso en la cuenta destino')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaDestino).fondos,\n  (datosTransferencia.saldoDestinoInicial),\n  'Se actualiza el saldo de la cuenta Destino')\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransferencia.cuentaOrigen) &&\n  (egreso.fecha === datosTransferencia.fecha) &&\n  (egreso.categoria === datosTransferencia.categoria) &&\n  (egreso.monto === datosTransferencia.monto)\n}), 'Se encontro el egreso en la cuenta origen')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaOrigen).fondos,\n  (datosTransferencia.saldoOrigenInicial),\n  'Se actualiza el saldo de la cuenta origen')",
            "err": {},
            "isRoot": false,
            "uuid": "2183d631-ce43-4442-9e48-45697bab5f50",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Destino inexistente",
            "fullTitle": "Transferencias invalidas Destino inexistente",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransferencia = {\n  cuentaDestino: 'banco',\n  fecha: '2019-05-06',\n  monto: 50,\n  categoria: 'Transferencia',\n  cuentaOrigen: 'ahorros',\n  saldoOrigenInicial: 100,\n  saldoDestinoInicial: 0\n}\nwrapper.vm.monto = datosTransferencia.monto\nwrapper.vm.fecha = datosTransferencia.fecha\nwrapper.vm.cuentaDestino = datosTransferencia.cuentaDestino\nwrapper.vm.transferir()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransferencia.cuentaDestino) &&\n  (ingreso.fecha === datosTransferencia.fecha) &&\n  (ingreso.categoria === datosTransferencia.categoria) &&\n  (ingreso.monto === datosTransferencia.monto)\n}), 'Se encontro el ingreso en la cuenta destino')\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransferencia.cuentaOrigen) &&\n  (egreso.fecha === datosTransferencia.fecha) &&\n  (egreso.categoria === datosTransferencia.categoria) &&\n  (egreso.monto === datosTransferencia.monto)\n}), 'Se encontro el egreso en la cuenta origen')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaOrigen).fondos,\n  (datosTransferencia.saldoOrigenInicial),\n  'Se actualiza el saldo de la cuenta origen')",
            "err": {},
            "isRoot": false,
            "uuid": "0a7777f8-9694-4a08-9da9-52e314c8a7c8",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "d8e13fd6-4882-4709-be19-6fb4ddc0699c",
          "9bdcd549-e236-44ff-8b7e-4e68fdfece8c",
          "64dc3824-234e-4e7d-94fa-dc3f22b2d5bc",
          "94055a80-aab8-4b80-a392-2e7161610dc2",
          "2183d631-ce43-4442-9e48-45697bab5f50",
          "0a7777f8-9694-4a08-9da9-52e314c8a7c8"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 58,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "79381fb4-ec1d-4883-95e9-025fba764683",
        "title": "render tranferencia",
        "fullFile": "/Users/abrahan/Desktop/JS/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "render tranferencia \"before each\" hook",
            "timedOut": false,
            "duration": 8,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'ahorros', fondos: 100, route: '/' })\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'comida', fondos: 0, route: '/' })\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransferencia__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store, propsData: { cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 100, route: '/' } }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "22444cf6-9c6e-46cc-a63d-e1fba6aeda35",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Elementos del formulario renderizan",
            "fullTitle": "render tranferencia Elementos del formulario renderizan",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.find('#selectorCuentaTransferencia').exists(), true)\nassert.equal(wrapper.find('#montoTransferencia').exists(), true)\nassert.equal(wrapper.find('#menuCalendarioTransferencia').exists(), true)\nassert.equal(wrapper.find('#okCalendarioTransferencia').exists(), true)\nassert.equal(wrapper.find('#agregarTransferencia').exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "a92669b5-0802-4abf-abe7-da078a036642",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "a92669b5-0802-4abf-abe7-da078a036642"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5a98911f-ffd6-4542-bb2a-1429e4ad2f4a",
        "title": "Cuenta, funcional",
        "fullFile": "/Users/abrahan/Desktop/JS/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Cuenta, funcional \"before each\" hook",
            "timedOut": false,
            "duration": 14,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nrouter = new vue_router__WEBPACK_IMPORTED_MODULE_3__[\"default\"]()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_CrearWallet_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    router\n  })\nwrapper.setData({\n  nombre: '',\n  nombreExiste: false,\n  snackbar: false,\n  timeout: 2500,\n  snackbarText: ''\n})",
            "err": {},
            "isRoot": false,
            "uuid": "e966a55c-d2a1-46fb-b969-cc65b6f08ca0",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Crear Cuenta, funcional",
            "fullTitle": "Cuenta, funcional Crear Cuenta, funcional",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.nombre = 'nuevaWallet'\nwrapper.vm.addCuenta()\nassert.exists(store.state.cuentas.find(cuenta => cuenta.nombre === 'nuevaWallet'),\n  'no se crea la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "e2d90d62-19a2-45de-946c-49277096353e",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "e2d90d62-19a2-45de-946c-49277096353e"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 5,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "90726b8e-3446-4d0a-b49c-91f1d51607d4",
        "title": "Cuentas invalidas",
        "fullFile": "/Users/abrahan/Desktop/JS/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Cuentas invalidas \"before each\" hook",
            "timedOut": false,
            "duration": 5,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nrouter = new vue_router__WEBPACK_IMPORTED_MODULE_3__[\"default\"]()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_CrearWallet_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    router\n  })\nwrapper.setData({\n  nombre: '',\n  nombreExiste: false,\n  snackbar: false,\n  timeout: 2500,\n  snackbarText: ''\n})",
            "err": {},
            "isRoot": false,
            "uuid": "73d73d80-b0bc-4394-bdd8-8a042cb39634",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "cuenta de nombre vacio",
            "fullTitle": "Cuentas invalidas cuenta de nombre vacio",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.nombre = ''\nwrapper.vm.addCuenta()\nassert.notExists(store.state.cuentas.find(cuenta => cuenta.nombre === ''),\n  'cuenta sin nombre creada')",
            "err": {},
            "isRoot": false,
            "uuid": "6144d38d-9111-4dc0-a70d-0b5dc6ab34ab",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "cuenta de nombre Global",
            "fullTitle": "Cuentas invalidas cuenta de nombre Global",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const nombreGlobal = 'Global'\nwrapper.vm.nombre = nombreGlobal\nwrapper.vm.addCuenta()\nassert.equal(1, store.state.cuentas.filter(cuenta => cuenta.nombre === nombreGlobal).length,\n  'cuenta con nombre global creada')",
            "err": {},
            "isRoot": false,
            "uuid": "90810986-432e-4197-b48a-cdbec989ff46",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "cuenta de nombre ya existente",
            "fullTitle": "Cuentas invalidas cuenta de nombre ya existente",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const nombre = 'ahorros'\nstore.state.cuentas.push({ icon: 'account_balance', nombre: nombre, fondos: 0, route: '/' })\nwrapper.vm.nombre = nombre\nwrapper.vm.addCuenta()\nassert.equal(1, store.state.cuentas.filter(cuenta => cuenta.nombre === nombre).length,\n  'cuenta con nombre existente creada')",
            "err": {},
            "isRoot": false,
            "uuid": "a19a0ace-5180-4f3a-9893-e89910c21036",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "6144d38d-9111-4dc0-a70d-0b5dc6ab34ab",
          "90810986-432e-4197-b48a-cdbec989ff46",
          "a19a0ace-5180-4f3a-9893-e89910c21036"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 4,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "55ce8e45-e77d-4e7f-b77a-fadbb54f26d8",
        "title": "Render crear cuenta",
        "fullFile": "/Users/abrahan/Desktop/JS/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Render crear cuenta \"before each\" hook",
            "timedOut": false,
            "duration": 6,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nrouter = new vue_router__WEBPACK_IMPORTED_MODULE_3__[\"default\"]()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_CrearWallet_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    router\n  })\nwrapper.setData({\n  nombre: '',\n  nombreExiste: false,\n  snackbar: false,\n  timeout: 2500,\n  snackbarText: ''\n})",
            "err": {},
            "isRoot": false,
            "uuid": "4911a262-ef42-4f5f-a6d2-b0712138ff9a",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "elementos iniciales",
            "fullTitle": "Render crear cuenta elementos iniciales",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.find('.Header').exists(), true)\nassert.equal(wrapper.find('#nombreCrearCuenta').exists(), true)\nassert.equal(wrapper.find('#crearCuenta').exists(), true)\nassert.equal(wrapper.find('#volverHome').exists(), true)\nassert.equal(wrapper.find('#snackbarCrearCuenta').exists(), true)\nassert.equal(wrapper.find('#okSnackbar').exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "1db4654f-8811-4942-8c99-b24607fb677f",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "1db4654f-8811-4942-8c99-b24607fb677f"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 4,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5176cb60-28c8-4bb0-9111-d0cb9918ae30",
        "title": "render cuenta manager",
        "fullFile": "/Users/abrahan/Desktop/JS/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "render cuenta manager \"before each\" hook",
            "timedOut": false,
            "duration": 5,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push(store.state.cuentas.push({\n  icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/'\n}))\nrouter = new vue_router__WEBPACK_IMPORTED_MODULE_3__[\"default\"]()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_CuentaManager_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    router,\n    propsData: {\n      cuenta: {\n        icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/'\n      }\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "271d5bf6-1f40-48ef-bdc3-fc6d811fc4aa",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "render elementos inicales",
            "fullTitle": "render cuenta manager render elementos inicales",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.find('#listaIngresos').exists(), true)\nassert.equal(wrapper.find('#listaEgresos').exists(), true)\nassert.equal(wrapper.find('#informacionCuenta').exists(), true)\nassert.equal(wrapper.find('#herramientas').exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "392b0ff7-9c73-4dd6-9402-fcd615c9264d",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "392b0ff7-9c73-4dd6-9402-fcd615c9264d"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "03e15c24-fa15-4ce4-beb3-2218e4f96bde",
        "title": "Cuenta Global",
        "fullFile": "/Users/abrahan/Desktop/JS/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Cuenta Global \"before each\" hook",
            "timedOut": false,
            "duration": 4,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push(store.state.cuentas.push({\n  icon: 'account_balance', nombre: 'Global', fondos: 0, route: '/'\n}))\nrouter = new vue_router__WEBPACK_IMPORTED_MODULE_3__[\"default\"]()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_CuentaManager_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    router,\n    propsData: {\n      cuenta: {\n        icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/'\n      }\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "6f9c2d52-5f89-4d37-92f5-1947b7cd0cc8",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Ingresos recibidos",
            "fullTitle": "Cuenta Global Ingresos recibidos",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.vm.ingresos.length, store.state.ingresos.length,\n  'no recibe todos los ingresos')",
            "err": {},
            "isRoot": false,
            "uuid": "3e2de534-a7ba-4ef8-a7ed-a8a9617363ec",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Egresos recibidos",
            "fullTitle": "Cuenta Global Egresos recibidos",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.vm.egresos.length, store.state.egresos.length,\n  'no recibe todos los egresos')",
            "err": {},
            "isRoot": false,
            "uuid": "39da3bc0-51de-45e1-a352-d341f1310169",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Saldo global",
            "fullTitle": "Cuenta Global Saldo global",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let saldoGlobal = 0\nstore.state.ingresos.forEach((ingreso) => {\n  saldoGlobal += Number(ingreso.monto)\n})\nstore.state.egresos.forEach((egreso) => {\n  saldoGlobal -= Number(egreso.monto)\n})\nassert.equal(wrapper.vm.saldo, saldoGlobal,\n  'calculos de saldo global erroneos')\nassert.equal(wrapper.vm.saldo, store.state.cuentas.find(cuenta => cuenta.nombre === 'Global').fondos,\n  'datos de saldo diferentes')",
            "err": {},
            "isRoot": false,
            "uuid": "45b8d75c-9322-4ba8-bba8-a6cff2b8a764",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "3e2de534-a7ba-4ef8-a7ed-a8a9617363ec",
          "39da3bc0-51de-45e1-a352-d341f1310169",
          "45b8d75c-9322-4ba8-bba8-a6cff2b8a764"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a29661b3-447e-49b4-bcb9-89fbc0d23ba4",
        "title": "render barra de herramientas",
        "fullFile": "/Users/abrahan/Desktop/JS/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "render barra de herramientas \"before each\" hook",
            "timedOut": false,
            "duration": 10,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push(store.state.cuentas.push({\n  icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/'\n}))\nrouter = new vue_router__WEBPACK_IMPORTED_MODULE_3__[\"default\"]()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_Herramientas_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    router,\n    propsData: {\n      cuenta: {\n        icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/'\n      }\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "72d4984e-d331-48b6-863d-e5368f93569c",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "render elementos inicales",
            "fullTitle": "render barra de herramientas render elementos inicales",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.find('#herramientaCategorias').exists(), true)\nassert.equal(wrapper.find('#botonReporte').exists(), true)\nassert.equal(wrapper.find('#alertaInferior').exists(), true)\nassert.equal(wrapper.find('#herramientaIngreso').exists(), true)\nassert.equal(wrapper.find('#herramientaEgreso').exists(), true)\nassert.equal(wrapper.find('#herramientaTransferencia').exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "ccfa0ac7-7a41-4d2d-878a-721aa9be77f6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "render caso cuenta global",
            "fullTitle": "render barra de herramientas render caso cuenta global",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.cuenta = {\n  icon: 'account_balance', nombre: 'Global', fondos: 0, route: '/'\n}\nassert.equal(wrapper.find('#herramientaCategorias').exists(), true)\nassert.equal(wrapper.find('#botonReporte').exists(), true)\nassert.equal(wrapper.find('#alertaInferior').exists(), true)\nassert.equal(wrapper.find('#herramientaIngreso').exists(), false)\nassert.equal(wrapper.find('#herramientaEgreso').exists(), false)\nassert.equal(wrapper.find('#herramientaTransferencia').exists(), false)",
            "err": {},
            "isRoot": false,
            "uuid": "1d9ba4d5-7094-4976-b36a-f1617ee02b09",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "ccfa0ac7-7a41-4d2d-878a-721aa9be77f6",
          "1d9ba4d5-7094-4976-b36a-f1617ee02b09"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 10,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3a15eafd-a7d9-481f-80df-25d7c5571cac",
        "title": "Modificar datos cuenta",
        "fullFile": "/Users/abrahan/Desktop/JS/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Modificar datos cuenta \"before each\" hook",
            "timedOut": false,
            "duration": 8,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push(store.state.cuentas.push({\n  icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/'\n}))\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_InformacionCuenta_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      cuentaActual: 'ahorros',\n      cuentaOriginal: 'ahorros',\n      fondos: 0\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "0c2e7600-c101-4fc6-b7fa-787a0351a703",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "editar nombre de cuenta",
            "fullTitle": "Modificar datos cuenta editar nombre de cuenta",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const nuevoNombre = 'Emergencias'\nwrapper.vm.cuentaActual = nuevoNombre\nwrapper.vm.editarNombre()\nassert.exists(store.state.cuentas.find(cuenta => cuenta.nombre === nuevoNombre),\n  'El nombre no cambia')",
            "err": {},
            "isRoot": false,
            "uuid": "6f473781-25e6-43ea-9a77-4b2c5fd2f465",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "borrar cuenta",
            "fullTitle": "Modificar datos cuenta borrar cuenta",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const cuentaOriginal = wrapper.vm.cuentaOriginal\nwrapper.vm.borrarCuenta()\nassert.notExists(store.state.cuentas.find(cuenta => cuenta.nombre === cuentaOriginal),\n  'Aun existe la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "fbc43681-f4ce-4232-87f7-8a9b1774d28b",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "6f473781-25e6-43ea-9a77-4b2c5fd2f465",
          "fbc43681-f4ce-4232-87f7-8a9b1774d28b"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 9,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "fd4d55ef-6455-4432-9e78-48300ecf50bd",
        "title": "Nombres de cuenta invalidos",
        "fullFile": "/Users/abrahan/Desktop/JS/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Nombres de cuenta invalidos \"before each\" hook",
            "timedOut": false,
            "duration": 5,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push(store.state.cuentas.push({\n  icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/'\n}))\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_InformacionCuenta_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      cuentaActual: 'ahorros',\n      cuentaOriginal: 'ahorros',\n      fondos: 0\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "e7424176-56b6-4d81-ba6e-8354cd9c722f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Nombre vacio",
            "fullTitle": "Nombres de cuenta invalidos Nombre vacio",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.cuentaActual = ''\nwrapper.vm.editarNombre()\nassert.notExists(store.state.cuentas.find(cuenta => cuenta.nombre === ''),\n  'Se encontro cuenta vacia')\nassert.equal(wrapper.vm.alerta.visible, true, 'alerta no aparece')",
            "err": {},
            "isRoot": false,
            "uuid": "66c8c268-01a3-4432-8305-b53e9e5a63d3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Nombre Global",
            "fullTitle": "Nombres de cuenta invalidos Nombre Global",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const nombreGlobal = 'Global'\nwrapper.vm.cuentaActual = nombreGlobal\nwrapper.vm.editarNombre()\nassert.equal(wrapper.vm.alerta.visible, true, 'alerta no aparece')\nassert.equal(store.state.cuentas.filter(cuenta => cuenta.nombre === nombreGlobal).length, 1,\n  'Dos cuentas globales existententes')",
            "err": {},
            "isRoot": false,
            "uuid": "8e1d0f2d-4273-47a7-a838-aae3a7282f35",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Nombre repetido",
            "fullTitle": "Nombres de cuenta invalidos Nombre repetido",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const otraCuenta = 'Estudios'\nstore.state.cuentas.push({ icon: 'account_balance', nombre: otraCuenta, fondos: 0, route: '/' })\nwrapper.vm.cuentaActual = otraCuenta\nwrapper.vm.editarNombre()\nassert.equal(wrapper.vm.alerta.visible, true, 'alerta no aparece')\nassert.equal(store.state.cuentas.filter(cuenta => cuenta.nombre === otraCuenta).length, 1,\n  'Dos cuentas de mismo nombre')",
            "err": {},
            "isRoot": false,
            "uuid": "8943e0a6-ef6b-4282-b06b-207258dcef3c",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "66c8c268-01a3-4432-8305-b53e9e5a63d3",
          "8e1d0f2d-4273-47a7-a838-aae3a7282f35",
          "8943e0a6-ef6b-4282-b06b-207258dcef3c"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 16,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ebdc01e8-e5e0-4476-80de-1291c3224619",
        "title": "Borrar Cuentas invalidas",
        "fullFile": "/Users/abrahan/Desktop/JS/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Borrar Cuentas invalidas \"before each\" hook",
            "timedOut": false,
            "duration": 7,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push(store.state.cuentas.push({\n  icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/'\n}))\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_InformacionCuenta_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      cuentaActual: 'ahorros',\n      cuentaOriginal: 'ahorros',\n      fondos: 0\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "3d29c460-1879-402e-87c6-a8614b04b480",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Borrar cuenta global",
            "fullTitle": "Borrar Cuentas invalidas Borrar cuenta global",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const nombreGlobal = 'Global'\nwrapper.vm.cuentaOriginal = nombreGlobal\nwrapper.vm.cuentaActual = nombreGlobal\nwrapper.vm.borrarCuenta()\nassert.exists(store.state.cuentas.find(cuenta => cuenta.nombre === nombreGlobal),\n  'Se borro la cuenta global')\nassert.equal(wrapper.vm.alerta.visible, true, 'alerta no aparece')",
            "err": {},
            "isRoot": false,
            "uuid": "311cac87-b509-406d-aea9-8ea9da050052",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Borrar cuenta con saldo",
            "fullTitle": "Borrar Cuentas invalidas Borrar cuenta con saldo",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const cuentaOriginal = wrapper.vm.cuentaOriginal\nwrapper.vm.fondos = 100\nwrapper.vm.borrarCuenta()\nassert.exists(store.state.cuentas.find(cuenta => cuenta.nombre === cuentaOriginal),\n  'Se borro cuenta con fondos')\nassert.equal(wrapper.vm.alerta.visible, true, 'alerta no aparece')",
            "err": {},
            "isRoot": false,
            "uuid": "fd42d9cd-6b0b-45ff-9bd6-46dd9b9ba9be",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Borrar cuenta con ingresos",
            "fullTitle": "Borrar Cuentas invalidas Borrar cuenta con ingresos",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const cuentaOriginal = wrapper.vm.cuentaOriginal\nstore.state.ingresos.push({\n  cuenta: cuentaOriginal,\n  fecha: '2019-05-23',\n  monto: 50,\n  categoria: 'Salario'\n})\nwrapper.vm.borrarCuenta()\nassert.exists(store.state.cuentas.find(cuenta => cuenta.nombre === cuentaOriginal),\n  'Se borro cuenta con Ingresos')\nassert.equal(wrapper.vm.alerta.visible, true, 'alerta no aparece')",
            "err": {},
            "isRoot": false,
            "uuid": "60350bee-b93c-4776-9d2f-da52b3cb52dc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Borrar cuenta con egresos",
            "fullTitle": "Borrar Cuentas invalidas Borrar cuenta con egresos",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const cuentaOriginal = wrapper.vm.cuentaOriginal\nstore.state.egresos.push({\n  cuenta: cuentaOriginal,\n  fecha: '2019-05-23',\n  monto: 50,\n  categoria: 'Otros'\n})\nwrapper.vm.borrarCuenta()\nassert.exists(store.state.cuentas.find(cuenta => cuenta.nombre === cuentaOriginal),\n  'Se borro cuenta con Egresos')\nassert.equal(wrapper.vm.alerta.visible, true, 'alerta no aparece')",
            "err": {},
            "isRoot": false,
            "uuid": "03e37e5a-2604-47e4-97cc-0652879ecd73",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "311cac87-b509-406d-aea9-8ea9da050052",
          "fd42d9cd-6b0b-45ff-9bd6-46dd9b9ba9be",
          "60350bee-b93c-4776-9d2f-da52b3cb52dc",
          "03e37e5a-2604-47e4-97cc-0652879ecd73"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 13,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "23bff180-1667-4a46-a050-30903ee1b3c1",
        "title": "Render informacion cuenta",
        "fullFile": "/Users/abrahan/Desktop/JS/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Render informacion cuenta \"before each\" hook",
            "timedOut": false,
            "duration": 6,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push(store.state.cuentas.push({\n  icon: 'account_balance',\n  nombre: 'ahorros',\n  fondos: 0,\n  route: '/'\n}))\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_InformacionCuenta_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      cuentaActual: 'ahorros',\n      cuentaOriginal: 'ahorros',\n      fondos: 0\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "b8fda926-3f12-410f-b0df-ca06f1f453a4",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Componentes iniciales renderizan",
            "fullTitle": "Render informacion cuenta Componentes iniciales renderizan",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.find('.titulo').exists(), true)\nassert.equal(wrapper.find('#nombreCuenta').exists(), true)\nassert.equal(wrapper.find('#editarCuenta').exists(), true)\nassert.equal(wrapper.find('#saldoCuenta').exists(), true)\nassert.equal(wrapper.find('#borrarCuenta').exists(), true)\nassert.equal(wrapper.find('#guardarCuenta').exists(), false)\nassert.equal(wrapper.find('#alertaSuperior').exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "fb4eb331-b354-4c2a-8382-dce69b293fd1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Boton editar cambia a guardar al click",
            "fullTitle": "Render informacion cuenta Boton editar cambia a guardar al click",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.find('#editarCuenta').exists(), true)\nassert.equal(wrapper.find('#guardarCuenta').exists(), false)\nwrapper.vm.edicion = true\nassert.equal(wrapper.find('#editarCuenta').exists(), false)\nassert.equal(wrapper.find('#guardarCuenta').exists(), true)\nwrapper.vm.edicion = false\nassert.equal(wrapper.find('#editarCuenta').exists(), true)\nassert.equal(wrapper.find('#guardarCuenta').exists(), false)",
            "err": {},
            "isRoot": false,
            "uuid": "76fcaa9e-23ec-4694-b539-b7c5d4c69595",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "fb4eb331-b354-4c2a-8382-dce69b293fd1",
          "76fcaa9e-23ec-4694-b539-b7c5d4c69595"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 6,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7c3fc4d9-c1c4-4d99-8f5d-2a01c4e018d9",
        "title": "render lista",
        "fullFile": "/Users/abrahan/Desktop/JS/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "render lista \"before each\" hook",
            "timedOut": false,
            "duration": 4,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push(store.state.cuentas.push({\n  icon: 'account_balance', nombre: 'ahorros', fondos: 70, route: '/'\n}))\nstore.state.ingresos.unshift({\n  cuenta: 'ahorros',\n  fecha: '2019-05-23',\n  monto: 50,\n  categoria: 'Salario'\n})\nstore.state.ingresos.unshift({\n  cuenta: 'ahorros',\n  fecha: '2019-05-23',\n  monto: 50,\n  categoria: 'Salario'\n})\nstore.state.egresos.unshift({\n  cuenta: 'ahorros',\n  fecha: '2019-05-23',\n  monto: 30,\n  categoria: 'Salario'\n})\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_Lista_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      items: store.state.ingresos,\n      titulo: 'Ingresos',\n      cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 70, route: '/' }\n    }\n  })\nwrapper.setData({\n  cabecerasTabla: [\n    { text: 'Fecha',\n      align: 'left',\n      sortable: false,\n      value: 'fecha' },\n    { text: 'Monto', value: 'monto' },\n    { text: 'Categoria', value: 'categoria' }\n  ]\n})",
            "err": {},
            "isRoot": false,
            "uuid": "fe1f7f1a-f748-47ef-a3c8-65f2b030b9e0",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Cada ingreso aparece en la lista",
            "fullTitle": "render lista Cada ingreso aparece en la lista",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// store.state.ingresos.forEach((ingreso, index) => {\n//  assert.equal(wrapper.find('#' + wrapper.vm.cuenta.nombre + index).exists(), true)\n// })",
            "err": {},
            "isRoot": false,
            "uuid": "2d5cd2e2-816b-4201-97d6-efbb14be2005",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "render objetos iniciales",
            "fullTitle": "render lista render objetos iniciales",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.find('.titulo').exists(), true)\nassert.equal(wrapper.find('#tabla' + wrapper.vm.titulo).exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "da20033b-0575-4074-b897-2713eb758ef1",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "2d5cd2e2-816b-4201-97d6-efbb14be2005",
          "da20033b-0575-4074-b897-2713eb758ef1"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f8aee335-7bb1-4bb1-a141-53ebb4df9e32",
        "title": "Render nav",
        "fullFile": "/Users/abrahan/Desktop/JS/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Render nav \"before each\" hook",
            "timedOut": false,
            "duration": 13,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_NavDrawer_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "ce7f2201-639a-4d0c-9f32-2ce4279a8e54",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "renderiza parte inicial",
            "fullTitle": "Render nav renderiza parte inicial",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.find('#nav').exists(), true)\nassert.equal(wrapper.find('#Global').exists(), true)\nassert.equal(wrapper.find('#crearCuentaNav').exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "312a3018-b3f2-4dfe-baf1-c2fa980b4493",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "renderiza todas las cuentas",
            "fullTitle": "Render nav renderiza todas las cuentas",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "store.state.cuentas.push({\n  icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/'\n})\nstore.state.cuentas.forEach(cuenta => {\n  console.log(store.state.cuentas.length)\n  assert.equal(wrapper.find('#' + cuenta.nombre).exists(), true, cuenta.nombre + ' no renderiza')\n})",
            "err": {},
            "isRoot": false,
            "uuid": "d7dd7edf-3699-443c-b1d3-42b19a56b982",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "312a3018-b3f2-4dfe-baf1-c2fa980b4493",
          "d7dd7edf-3699-443c-b1d3-42b19a56b982"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 5,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5fb7add8-e5ba-494f-8cd0-f4148a108257",
        "title": "Unit tests del reporte",
        "fullFile": "/Users/abrahan/Desktop/JS/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Unit tests del reporte \"before each\" hook",
            "timedOut": false,
            "duration": 9,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_ReportUtil_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getDefaultStore()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_1__[\"shallowMount\"])(_components_Report_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "cf1ddb27-deb9-4480-bc3e-82687dbacae3",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Recibe las fechas con exito",
            "fullTitle": "Unit tests del reporte Recibe las fechas con exito",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var fechas = store.getters.obtenerFechas\nchai__WEBPACK_IMPORTED_MODULE_0__[\"assert\"].equal(fechas.length, 6)",
            "err": {},
            "isRoot": false,
            "uuid": "19987e63-177a-4fd5-9994-fb20b9777f61",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Reporte obtenido con 6 objetos",
            "fullTitle": "Unit tests del reporte Reporte obtenido con 6 objetos",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai__WEBPACK_IMPORTED_MODULE_0__[\"assert\"].exists(wrapper.vm.nuevoReporte)\nchai__WEBPACK_IMPORTED_MODULE_0__[\"assert\"].lengthOf(wrapper.vm.nuevoReporte, 6)",
            "err": {},
            "isRoot": false,
            "uuid": "790f8003-fbb4-492e-b94f-7ec179925b76",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Categorias concatenadas para el filtro",
            "fullTitle": "Unit tests del reporte Categorias concatenadas para el filtro",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var catIngreso = store.state.categoriaIngresos\nvar catEgreso = store.state.categoriaEgresos\nvar concatenacion = store.getters.obtenerCategorias\nvar total = catIngreso.length + catEgreso.length\nchai__WEBPACK_IMPORTED_MODULE_0__[\"assert\"].isAtMost(concatenacion.length, total)",
            "err": {},
            "isRoot": false,
            "uuid": "ad2d1161-6b21-4ee4-9b7d-cec3a4dd63e2",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "19987e63-177a-4fd5-9994-fb20b9777f61",
          "790f8003-fbb4-492e-b94f-7ec179925b76",
          "ad2d1161-6b21-4ee4-9b7d-cec3a4dd63e2"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}