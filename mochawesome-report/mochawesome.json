{
  "stats": {
    "suites": 25,
    "tests": 59,
    "passes": 59,
    "pending": 0,
    "failures": 0,
    "start": "2019-05-23T03:56:57.449Z",
    "end": "2019-05-23T03:56:58.797Z",
    "duration": 1348,
    "testsRegistered": 62,
    "passPercent": 95.2,
    "pendingPercent": 0,
    "other": 1,
    "hasOther": true,
    "skipped": 3,
    "hasSkipped": true,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "c00c9f0e-06f8-42eb-b789-b74a1e521b6f",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "6a72bbcb-ce97-44f3-8a69-5ed3b2e5e155",
        "title": "categorias, test funcional",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-etFinal/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "categorias, test funcional \"before each\" hook",
            "timedOut": false,
            "duration": 21,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonCategorias_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      categoriaIngresos: store.state.categoriaIngresos,\n      categoriaEgresos: store.state.categoriaEgresos\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "8d924474-3eba-4b54-b7fd-41a7259bef5f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Crear categoria Ingreso, funcional",
            "fullTitle": "categorias, test funcional Crear categoria Ingreso, funcional",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const categoriaNueva = ['Ventas']\nwrapper.vm.tipo = 'Ingreso'\nwrapper.vm.nombre = categoriaNueva\nwrapper.vm.agregar()\nassert.exists(store.state.categoriaIngresos.find(categoria => categoria === categoriaNueva),\n  'No se encontro la nueva cateogira')",
            "err": {},
            "isRoot": false,
            "uuid": "587733f4-5c46-45cd-ad1b-995984152b4d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Crear categoria Egreso, funcional",
            "fullTitle": "categorias, test funcional Crear categoria Egreso, funcional",
            "timedOut": false,
            "duration": 41,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const categoriaNueva = ['Compras']\nwrapper.vm.tipo = 'Egreso'\nwrapper.vm.nombre = categoriaNueva\nwrapper.vm.agregar()\nassert.exists(store.state.categoriaEgresos.find(categoria => categoria === categoriaNueva),\n  'No se encontro la nueva cateogira')",
            "err": {},
            "isRoot": false,
            "uuid": "e303f6da-44f1-4c7d-9319-96f32ec53d04",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "587733f4-5c46-45cd-ad1b-995984152b4d",
          "e303f6da-44f1-4c7d-9319-96f32ec53d04"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 61,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "bbb74e7c-dd33-447f-bd80-0e8cce203ad2",
        "title": "categorias render test",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-etFinal/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "categorias render test \"before each\" hook",
            "timedOut": false,
            "duration": 8,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonCategorias_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      categoriaIngresos: store.state.categoriaIngresos,\n      categoriaEgresos: store.state.categoriaEgresos\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "2428e13f-6968-4b81-9a23-fa33ce3cb475",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "elementos formulario renderizan",
            "fullTitle": "categorias render test elementos formulario renderizan",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.find('#selectorCategoria').exists(), true)\nassert.equal(wrapper.find('#nombreCategoria').exists(), true)\nassert.equal(wrapper.find('#agregarCategoria').exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "0ce91f8b-efc5-4f76-a485-833a8d4b4612",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "0ce91f8b-efc5-4f76-a485-833a8d4b4612"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 9,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ba9a256b-9095-4af3-b6f2-db2f399c890f",
        "title": "Datos iniciales categorias",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-etFinal/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Datos iniciales categorias \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()",
            "err": {},
            "isRoot": false,
            "uuid": "9d3673b7-dd92-4110-b422-495b84507ac2",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Deberia tener 3 categorias de ingreso iniciales",
            "fullTitle": "Datos iniciales categorias Deberia tener 3 categorias de ingreso iniciales",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(3, store.state.categoriaIngresos.length,\n  'numero de categorias de ingresos: ' + store.state.categoriaIngresos.length)\nassert.exists(store.state.categoriaIngresos.find(categoria => categoria === 'Salario'),\n  'No esiste la categoria Salarios')\nassert.exists(store.state.categoriaIngresos.find(categoria => categoria === 'Transferencia'),\n  'No esiste la categoria Transferencia')\nassert.exists(store.state.categoriaIngresos.find(categoria => categoria === 'Otros'),\n  'No esiste la categoria Otros')",
            "err": {},
            "isRoot": false,
            "uuid": "66fba946-fefe-470d-ba7a-93f5905261dc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Deberia tener 3 categorias de egreso iniciales",
            "fullTitle": "Datos iniciales categorias Deberia tener 3 categorias de egreso iniciales",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(3, store.state.categoriaEgresos.length,\n  'numero de categorias de egresos: ' + store.state.categoriaEgresos.length)\nassert.exists(store.state.categoriaEgresos.find(categoria => categoria === 'Expensas'),\n  'No esiste la categoria Expensas')\nassert.exists(store.state.categoriaEgresos.find(categoria => categoria === 'Transferencia'),\n  'No esiste la categoria Transferencia')\nassert.exists(store.state.categoriaEgresos.find(categoria => categoria === 'Otros'),\n  'No esiste la categoria Otros')",
            "err": {},
            "isRoot": false,
            "uuid": "cb875ea0-8440-4d24-9493-96cee48c8fda",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "66fba946-fefe-470d-ba7a-93f5905261dc",
          "cb875ea0-8440-4d24-9493-96cee48c8fda"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "af4e2d0e-b8dc-4563-a690-83da2952ed54",
        "title": "Categorias invalidas",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-etFinal/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Categorias invalidas \"before each\" hook",
            "timedOut": false,
            "duration": 12,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonCategorias_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      categoriaIngresos: store.state.categoriaIngresos,\n      categoriaEgresos: store.state.categoriaEgresos\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "e890432e-55ed-4880-9ed5-d3465a98b615",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "no se puede crear categorias de ingreso con nombre vacio",
            "fullTitle": "Categorias invalidas no se puede crear categorias de ingreso con nombre vacio",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.tipo = 'Ingreso'\nwrapper.vm.nombre = ''\nwrapper.vm.agregar()\nassert.notExists(store.state.categoriaIngresos.find(categoria => categoria === ''))",
            "err": {},
            "isRoot": false,
            "uuid": "31910a57-168a-47f9-9242-de6bc562ef3e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "no se puede crear categorias de egreso con nombre vacio",
            "fullTitle": "Categorias invalidas no se puede crear categorias de egreso con nombre vacio",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.tipo = 'Egreso'\nwrapper.vm.nombre = ''\nwrapper.vm.agregar()\nassert.notExists(store.state.categoriaEgresos.find(categoria => categoria === ''))",
            "err": {},
            "isRoot": false,
            "uuid": "11655d0e-88b3-4ccc-b91b-999df0e64f06",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "No se pueden agregar categorias de ingreso ya existentes",
            "fullTitle": "Categorias invalidas No se pueden agregar categorias de ingreso ya existentes",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const categoriaExistente = 'Salario'\nconst cantidadInicial = store.state.categoriaEgresos.length\nwrapper.vm.tipo = 'Ingreso'\nwrapper.vm.nombre = categoriaExistente\nwrapper.vm.agregar()\nassert.equal(store.state.categoriaIngresos.length, cantidadInicial)",
            "err": {},
            "isRoot": false,
            "uuid": "bde02c93-bd5a-4181-ba96-a900cf57d3c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "No se pueden agregar categorias de egreso ya existentes",
            "fullTitle": "Categorias invalidas No se pueden agregar categorias de egreso ya existentes",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const categoriaExistente = 'Expensas'\nconst cantidadInicial = store.state.categoriaEgresos.length\nwrapper.vm.tipo = 'Egreso'\nwrapper.vm.nombre = categoriaExistente\nwrapper.vm.agregar()\nassert.equal(store.state.categoriaEgresos.length, cantidadInicial)",
            "err": {},
            "isRoot": false,
            "uuid": "38e945bd-9f2d-4428-b8e1-5c8fc6038b66",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "no se puede crear categorias sin tipo",
            "fullTitle": "Categorias invalidas no se puede crear categorias sin tipo",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const nombreCategoria = 'Supermercado'\nwrapper.vm.tipo = ''\nwrapper.vm.nombre = nombreCategoria\nwrapper.vm.agregar()\nassert.notExists(store.state.categoriaIngresos.find(categoria => categoria === nombreCategoria))\nassert.notExists(store.state.categoriaEgresos.find(categoria => categoria === nombreCategoria))",
            "err": {},
            "isRoot": false,
            "uuid": "0a88e0b4-3ea8-47b0-bbd2-25a69fd946c0",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "31910a57-168a-47f9-9242-de6bc562ef3e",
          "11655d0e-88b3-4ccc-b91b-999df0e64f06",
          "bde02c93-bd5a-4181-ba96-a900cf57d3c4",
          "38e945bd-9f2d-4428-b8e1-5c8fc6038b66",
          "0a88e0b4-3ea8-47b0-bbd2-25a69fd946c0"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 22,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "be70f625-f1f9-416b-a5ce-cec41d396f06",
        "title": "Ingresos, funcional",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-etFinal/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Ingresos, funcional \"before each\" hook",
            "timedOut": false,
            "duration": 18,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/' })\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransacciones__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      tipo: 'Ingreso',\n      cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/' },\n      categorias: store.state.categoriaIngresos }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "9de54356-5810-4d68-936f-8af02243c923",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Agregar Ingreso",
            "fullTitle": "Ingresos, funcional Agregar Ingreso",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: 120, categoria: 'Salario' }\nconst saldoInicial = 0\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.exists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransaccion.cuenta) &&\n  (ingreso.fecha === datosTransaccion.fecha) &&\n  (ingreso.categoria === datosTransaccion.categoria) &&\n  (ingreso.monto === datosTransaccion.monto)\n}), 'No se encontro el ingreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  (saldoInicial + datosTransaccion.monto), 'No se actualiza el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "110049a3-406d-4a21-9d0a-afa4a365a6ff",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "110049a3-406d-4a21-9d0a-afa4a365a6ff"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 15,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "47842cc3-127c-49cd-9863-ebab1b48892b",
        "title": "Egresos, funcional",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-etFinal/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Egresos, funcional \"before each\" hook",
            "timedOut": false,
            "duration": 14,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/' })\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransacciones__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      tipo: 'Egreso',\n      cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 200, route: '/' },\n      categorias: store.state.categoriaEgresos }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "6f6a12bb-2ebc-493d-856d-9fef396b6c9f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Agregar Egreso",
            "fullTitle": "Egresos, funcional Agregar Egreso",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: 100, categoria: 'Expensas' }\nconst saldoInicial = 200\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.exists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransaccion.cuenta) &&\n  (egreso.fecha === datosTransaccion.fecha) &&\n  (egreso.categoria === datosTransaccion.categoria) &&\n  (egreso.monto === datosTransaccion.monto)\n}), 'No se encontro el egreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  (saldoInicial - datosTransaccion.monto), 'No se actualiza el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "486e8970-8d9a-42d5-bcf0-7616cc6b0165",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "486e8970-8d9a-42d5-bcf0-7616cc6b0165"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 16,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d8d4fd8d-4a51-4b32-b19b-719191a79c05",
        "title": "Ingresos invalidos",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-etFinal/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Ingresos invalidos \"before each\" hook",
            "timedOut": false,
            "duration": 11,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/' })\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransacciones__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      tipo: 'Ingreso',\n      cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/' },\n      categorias: store.state.categoriaIngresos }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "855de548-ded9-4a14-920d-bcd8df0d01f2",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "categoria vacia",
            "fullTitle": "Ingresos invalidos categoria vacia",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: 100, categoria: '' }\nconst saldoInicial = 0\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransaccion.cuenta) &&\n  (ingreso.fecha === datosTransaccion.fecha) &&\n  (ingreso.categoria === datosTransaccion.categoria) &&\n  (ingreso.monto === datosTransaccion.monto)\n}), 'Se agrego el ingreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "424dafdc-82cc-407a-8b5a-ca9d9433fd75",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "fecha vacia",
            "fullTitle": "Ingresos invalidos fecha vacia",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '', monto: 100, categoria: 'Salario' }\nconst saldoInicial = 0\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransaccion.cuenta) &&\n  (ingreso.fecha === datosTransaccion.fecha) &&\n  (ingreso.categoria === datosTransaccion.categoria) &&\n  (ingreso.monto === datosTransaccion.monto)\n}), 'Se agrego el ingreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "67c07a44-d406-4755-aaca-0b7978ab984d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "monto nulo",
            "fullTitle": "Ingresos invalidos monto nulo",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: 0, categoria: 'Salario' }\nconst saldoInicial = 0\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransaccion.cuenta) &&\n  (ingreso.fecha === datosTransaccion.fecha) &&\n  (ingreso.categoria === datosTransaccion.categoria) &&\n  (ingreso.monto === datosTransaccion.monto)\n}), 'Se agrego el ingreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "a8fb4c82-17df-4927-8fbb-46c84f422e37",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "monto negativo",
            "fullTitle": "Ingresos invalidos monto negativo",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: -50, categoria: 'Salario' }\nconst saldoInicial = 0\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransaccion.cuenta) &&\n  (ingreso.fecha === datosTransaccion.fecha) &&\n  (ingreso.categoria === datosTransaccion.categoria) &&\n  (ingreso.monto === datosTransaccion.monto)\n}), 'Se agrego el ingreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "1f87a92e-f646-41e4-94e2-11697ee3e756",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "categoria inexistente",
            "fullTitle": "Ingresos invalidos categoria inexistente",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: 50, categoria: 'Tienda' }\nconst saldoInicial = 0\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransaccion.cuenta) &&\n  (ingreso.fecha === datosTransaccion.fecha) &&\n  (ingreso.categoria === datosTransaccion.categoria) &&\n  (ingreso.monto === datosTransaccion.monto)\n}), 'Se agrego el ingreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "873dbcb2-5d6d-4254-afb8-ed8d19f938ac",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "424dafdc-82cc-407a-8b5a-ca9d9433fd75",
          "67c07a44-d406-4755-aaca-0b7978ab984d",
          "a8fb4c82-17df-4927-8fbb-46c84f422e37",
          "1f87a92e-f646-41e4-94e2-11697ee3e756",
          "873dbcb2-5d6d-4254-afb8-ed8d19f938ac"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 74,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3d665c36-55b2-4ac1-a10b-c07164ce30c1",
        "title": "Egresos invalidos",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-etFinal/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Egresos invalidos \"before each\" hook",
            "timedOut": false,
            "duration": 9,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'ahorros', fondos: 100, route: '/' })\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransacciones__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      tipo: 'Egreso',\n      cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 100, route: '/' },\n      categorias: store.state.categoriaEgresos }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "129f0752-f1d8-4c1e-b06a-fe3e6538851c",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "categoria vacia",
            "fullTitle": "Egresos invalidos categoria vacia",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: 50, categoria: '' }\nconst saldoInicial = 100\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransaccion.cuenta) &&\n  (egreso.fecha === datosTransaccion.fecha) &&\n  (egreso.categoria === datosTransaccion.categoria) &&\n  (egreso.monto === datosTransaccion.monto)\n}), 'Se agrego el egreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "c4dd6a8e-6bc6-46e7-afc9-7ca29c45d180",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "fecha vacia",
            "fullTitle": "Egresos invalidos fecha vacia",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '', monto: 50, categoria: 'Expensas' }\nconst saldoInicial = 100\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransaccion.cuenta) &&\n  (egreso.fecha === datosTransaccion.fecha) &&\n  (egreso.categoria === datosTransaccion.categoria) &&\n  (egreso.monto === datosTransaccion.monto)\n}), 'Se agrego el egreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "e31f4138-3f47-4a34-872f-0fc9e7de29aa",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "monto nulo",
            "fullTitle": "Egresos invalidos monto nulo",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: 0, categoria: 'Expensas' }\nconst saldoInicial = 100\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransaccion.cuenta) &&\n  (egreso.fecha === datosTransaccion.fecha) &&\n  (egreso.categoria === datosTransaccion.categoria) &&\n  (egreso.monto === datosTransaccion.monto)\n}), 'Se agrego el egreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "e04971e1-eea2-4709-8103-1ae9bcf97391",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "monto negativo",
            "fullTitle": "Egresos invalidos monto negativo",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: -50, categoria: 'Expensas' }\nconst saldoInicial = 100\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransaccion.cuenta) &&\n  (egreso.fecha === datosTransaccion.fecha) &&\n  (egreso.categoria === datosTransaccion.categoria) &&\n  (egreso.monto === datosTransaccion.monto)\n}), 'Se agrego el egreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "994cb467-2736-4391-8754-7a4f0449a9b9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "monto mayor al saldo",
            "fullTitle": "Egresos invalidos monto mayor al saldo",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: 200, categoria: 'Expensas' }\nconst saldoInicial = 100\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransaccion.cuenta) &&\n  (egreso.fecha === datosTransaccion.fecha) &&\n  (egreso.categoria === datosTransaccion.categoria) &&\n  (egreso.monto === datosTransaccion.monto)\n}), 'Se agrego el egreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "f81cfa53-b853-4463-9528-56fd461790c7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "categoria inexistente",
            "fullTitle": "Egresos invalidos categoria inexistente",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: 50, categoria: 'Tienda' }\nconst saldoInicial = 100\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransaccion.cuenta) &&\n  (egreso.fecha === datosTransaccion.fecha) &&\n  (egreso.categoria === datosTransaccion.categoria) &&\n  (egreso.monto === datosTransaccion.monto)\n}), 'Se agrego el egreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "797f6de1-9d97-40c9-97a7-b5ed83247afd",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "c4dd6a8e-6bc6-46e7-afc9-7ca29c45d180",
          "e31f4138-3f47-4a34-872f-0fc9e7de29aa",
          "e04971e1-eea2-4709-8103-1ae9bcf97391",
          "994cb467-2736-4391-8754-7a4f0449a9b9",
          "f81cfa53-b853-4463-9528-56fd461790c7",
          "797f6de1-9d97-40c9-97a7-b5ed83247afd"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 67,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "429d2e9a-21c7-4138-8be1-7dfa31df875d",
        "title": "Render test, transacciones",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-etFinal/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Render test, transacciones \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/' })",
            "err": {},
            "isRoot": false,
            "uuid": "61a59712-a716-4b4b-b0a5-ffeb5519baf6",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "test ingreso",
            "fullTitle": "Render test, transacciones test ingreso",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransacciones__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      tipo: 'Ingreso',\n      cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/' },\n      categorias: store.state.categoriaIngresos }\n  })\nassert.equal(wrapper.find('#selectorIngreso').exists(), true)\nassert.equal(wrapper.find('#montoIngreso').exists(), true)\nassert.equal(wrapper.find('#menuCalendarioIngreso').exists(), true)\nassert.equal(wrapper.find('#okCalendarioIngreso').exists(), true)\nassert.equal(wrapper.find('#agregarIngreso').exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "96b132b5-ada1-47ca-8026-e48e7617ecbc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "test egreso",
            "fullTitle": "Render test, transacciones test egreso",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransacciones__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      tipo: 'Egreso',\n      cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/' },\n      categorias: store.state.categoriaIngresos }\n  })\nassert.equal(wrapper.find('#selectorEgreso').exists(), true)\nassert.equal(wrapper.find('#montoEgreso').exists(), true)\nassert.equal(wrapper.find('#menuCalendarioEgreso').exists(), true)\nassert.equal(wrapper.find('#okCalendarioEgreso').exists(), true)\nassert.equal(wrapper.find('#agregarEgreso').exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "cf6da4b7-5ec0-4c9c-8600-7545701d5b18",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "96b132b5-ada1-47ca-8026-e48e7617ecbc",
          "cf6da4b7-5ec0-4c9c-8600-7545701d5b18"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 23,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "74c4320b-5374-4b31-b97e-befd004e37a6",
        "title": "Transferencia, funcional",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-etFinal/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Transferencia, funcional \"before each\" hook",
            "timedOut": false,
            "duration": 12,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'ahorros', fondos: 100, route: '/' })\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'comida', fondos: 0, route: '/' })\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransferencia__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store, propsData: { cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 100, route: '/' } }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "a27b92bd-6399-4fbd-8584-2a6600e84315",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Agregar Transferencia",
            "fullTitle": "Transferencia, funcional Agregar Transferencia",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransferencia = {\n  cuentaDestino: 'comida',\n  fecha: '2019-05-06',\n  monto: 50,\n  categoria: 'Transferencia',\n  cuentaOrigen: 'ahorros',\n  saldoOrigenInicial: 100,\n  saldoDestinoInicial: 0\n}\nwrapper.vm.monto = datosTransferencia.monto\nwrapper.vm.fecha = datosTransferencia.fecha\nwrapper.vm.cuentaDestino = datosTransferencia.cuentaDestino\nwrapper.vm.transferir()\nassert.exists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransferencia.cuentaDestino) &&\n  (ingreso.fecha === datosTransferencia.fecha) &&\n  (ingreso.categoria === datosTransferencia.categoria) &&\n  (ingreso.monto === datosTransferencia.monto)\n}), 'No se encontro el ingreso en la cuenta destino' + store.state.egresos.length)\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaDestino).fondos,\n  (datosTransferencia.saldoDestinoInicial + datosTransferencia.monto),\n  'No se actualiza el saldo de la cuenta Destino')\nassert.exists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransferencia.cuentaOrigen) &&\n  (egreso.fecha === datosTransferencia.fecha) &&\n  (egreso.categoria === datosTransferencia.categoria) &&\n  (egreso.monto === datosTransferencia.monto)\n}), 'No se encontro el egreso en la cuenta origen')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaOrigen).fondos,\n  (datosTransferencia.saldoOrigenInicial - datosTransferencia.monto),\n  'No se actualiza el saldo de la cuenta origen')",
            "err": {},
            "isRoot": false,
            "uuid": "094196cd-3781-4bf2-bec1-a0bb2810d112",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "094196cd-3781-4bf2-bec1-a0bb2810d112"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 14,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9c40cd1e-8915-4f4c-941f-3a0bc28d4206",
        "title": "Transferencias invalidas",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-etFinal/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Transferencias invalidas \"before each\" hook",
            "timedOut": false,
            "duration": 12,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'ahorros', fondos: 100, route: '/' })\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'comida', fondos: 0, route: '/' })\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransferencia__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store, propsData: { cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 100, route: '/' } }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "acad078a-4c84-4941-89ec-313a9873d9ea",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Fecha vacia",
            "fullTitle": "Transferencias invalidas Fecha vacia",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransferencia = {\n  cuentaDestino: 'comida',\n  fecha: '',\n  monto: 50,\n  categoria: 'Transferencia',\n  cuentaOrigen: 'ahorros',\n  saldoOrigenInicial: 100,\n  saldoDestinoInicial: 0\n}\nwrapper.vm.monto = datosTransferencia.monto\nwrapper.vm.fecha = datosTransferencia.fecha\nwrapper.vm.cuentaDestino = datosTransferencia.cuentaDestino\nwrapper.vm.transferir()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransferencia.cuentaDestino) &&\n  (ingreso.fecha === datosTransferencia.fecha) &&\n  (ingreso.categoria === datosTransferencia.categoria) &&\n  (ingreso.monto === datosTransferencia.monto)\n}), 'Se encontro el ingreso en la cuenta destino')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaDestino).fondos,\n  (datosTransferencia.saldoDestinoInicial),\n  'Se actualiza el saldo de la cuenta Destino')\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransferencia.cuentaOrigen) &&\n  (egreso.fecha === datosTransferencia.fecha) &&\n  (egreso.categoria === datosTransferencia.categoria) &&\n  (egreso.monto === datosTransferencia.monto)\n}), 'Se encontro el egreso en la cuenta origen')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaOrigen).fondos,\n  (datosTransferencia.saldoOrigenInicial),\n  'Se actualiza el saldo de la cuenta origen')",
            "err": {},
            "isRoot": false,
            "uuid": "4e02f74b-33a8-49d8-9d3c-be95d22fa49e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Cuenta destino vacia",
            "fullTitle": "Transferencias invalidas Cuenta destino vacia",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransferencia = {\n  cuentaDestino: '',\n  fecha: '2019-05-06',\n  monto: 50,\n  categoria: 'Transferencia',\n  cuentaOrigen: 'ahorros',\n  saldoOrigenInicial: 100,\n  saldoDestinoInicial: 0\n}\nwrapper.vm.monto = datosTransferencia.monto\nwrapper.vm.fecha = datosTransferencia.fecha\nwrapper.vm.cuentaDestino = datosTransferencia.cuentaDestino\nwrapper.vm.transferir()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransferencia.cuentaDestino) &&\n  (ingreso.fecha === datosTransferencia.fecha) &&\n  (ingreso.categoria === datosTransferencia.categoria) &&\n  (ingreso.monto === datosTransferencia.monto)\n}), 'Se encontro el ingreso en la cuenta destino')\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransferencia.cuentaOrigen) &&\n  (egreso.fecha === datosTransferencia.fecha) &&\n  (egreso.categoria === datosTransferencia.categoria) &&\n  (egreso.monto === datosTransferencia.monto)\n}), 'Se encontro el egreso en la cuenta origen')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaOrigen).fondos,\n  (datosTransferencia.saldoOrigenInicial),\n  'Se actualiza el saldo de la cuenta origen')",
            "err": {},
            "isRoot": false,
            "uuid": "54c168c2-4b70-4e8e-8e3f-7b252fd7cfa0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "monto nulo",
            "fullTitle": "Transferencias invalidas monto nulo",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransferencia = {\n  cuentaDestino: 'comida',\n  fecha: '2019-05-06',\n  monto: 0,\n  categoria: 'Transferencia',\n  cuentaOrigen: 'ahorros',\n  saldoOrigenInicial: 100,\n  saldoDestinoInicial: 0\n}\nwrapper.vm.monto = datosTransferencia.monto\nwrapper.vm.fecha = datosTransferencia.fecha\nwrapper.vm.cuentaDestino = datosTransferencia.cuentaDestino\nwrapper.vm.transferir()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransferencia.cuentaDestino) &&\n  (ingreso.fecha === datosTransferencia.fecha) &&\n  (ingreso.categoria === datosTransferencia.categoria) &&\n  (ingreso.monto === datosTransferencia.monto)\n}), 'Se encontro el ingreso en la cuenta destino')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaDestino).fondos,\n  (datosTransferencia.saldoDestinoInicial),\n  'Se actualiza el saldo de la cuenta Destino')\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransferencia.cuentaOrigen) &&\n  (egreso.fecha === datosTransferencia.fecha) &&\n  (egreso.categoria === datosTransferencia.categoria) &&\n  (egreso.monto === datosTransferencia.monto)\n}), 'Se encontro el egreso en la cuenta origen')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaOrigen).fondos,\n  (datosTransferencia.saldoOrigenInicial),\n  'Se actualiza el saldo de la cuenta origen')",
            "err": {},
            "isRoot": false,
            "uuid": "ca4cf1c2-df65-4bb4-904c-1ad66eb18ee7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "monto negativo",
            "fullTitle": "Transferencias invalidas monto negativo",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransferencia = {\n  cuentaDestino: 'comida',\n  fecha: '2019-05-06',\n  monto: -30,\n  categoria: 'Transferencia',\n  cuentaOrigen: 'ahorros',\n  saldoOrigenInicial: 100,\n  saldoDestinoInicial: 0\n}\nwrapper.vm.monto = datosTransferencia.monto\nwrapper.vm.fecha = datosTransferencia.fecha\nwrapper.vm.cuentaDestino = datosTransferencia.cuentaDestino\nwrapper.vm.transferir()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransferencia.cuentaDestino) &&\n  (ingreso.fecha === datosTransferencia.fecha) &&\n  (ingreso.categoria === datosTransferencia.categoria) &&\n  (ingreso.monto === datosTransferencia.monto)\n}), 'Se encontro el ingreso en la cuenta destino')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaDestino).fondos,\n  (datosTransferencia.saldoDestinoInicial),\n  'Se actualiza el saldo de la cuenta Destino')\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransferencia.cuentaOrigen) &&\n  (egreso.fecha === datosTransferencia.fecha) &&\n  (egreso.categoria === datosTransferencia.categoria) &&\n  (egreso.monto === datosTransferencia.monto)\n}), 'Se encontro el egreso en la cuenta origen')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaOrigen).fondos,\n  (datosTransferencia.saldoOrigenInicial),\n  'Se actualiza el saldo de la cuenta origen')",
            "err": {},
            "isRoot": false,
            "uuid": "3beb6a13-3a9a-4f5d-b3d5-6a1fd11d67a3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "saldo insuficiente",
            "fullTitle": "Transferencias invalidas saldo insuficiente",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransferencia = {\n  cuentaDestino: 'comida',\n  fecha: '2019-05-06',\n  monto: 200,\n  categoria: 'Transferencia',\n  cuentaOrigen: 'ahorros',\n  saldoOrigenInicial: 100,\n  saldoDestinoInicial: 0\n}\nwrapper.vm.monto = datosTransferencia.monto\nwrapper.vm.fecha = datosTransferencia.fecha\nwrapper.vm.cuentaDestino = datosTransferencia.cuentaDestino\nwrapper.vm.transferir()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransferencia.cuentaDestino) &&\n  (ingreso.fecha === datosTransferencia.fecha) &&\n  (ingreso.categoria === datosTransferencia.categoria) &&\n  (ingreso.monto === datosTransferencia.monto)\n}), 'Se encontro el ingreso en la cuenta destino')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaDestino).fondos,\n  (datosTransferencia.saldoDestinoInicial),\n  'Se actualiza el saldo de la cuenta Destino')\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransferencia.cuentaOrigen) &&\n  (egreso.fecha === datosTransferencia.fecha) &&\n  (egreso.categoria === datosTransferencia.categoria) &&\n  (egreso.monto === datosTransferencia.monto)\n}), 'Se encontro el egreso en la cuenta origen')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaOrigen).fondos,\n  (datosTransferencia.saldoOrigenInicial),\n  'Se actualiza el saldo de la cuenta origen')",
            "err": {},
            "isRoot": false,
            "uuid": "2b383e2c-70bd-4a27-895a-69564e6815a0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Destino inexistente",
            "fullTitle": "Transferencias invalidas Destino inexistente",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransferencia = {\n  cuentaDestino: 'banco',\n  fecha: '2019-05-06',\n  monto: 50,\n  categoria: 'Transferencia',\n  cuentaOrigen: 'ahorros',\n  saldoOrigenInicial: 100,\n  saldoDestinoInicial: 0\n}\nwrapper.vm.monto = datosTransferencia.monto\nwrapper.vm.fecha = datosTransferencia.fecha\nwrapper.vm.cuentaDestino = datosTransferencia.cuentaDestino\nwrapper.vm.transferir()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransferencia.cuentaDestino) &&\n  (ingreso.fecha === datosTransferencia.fecha) &&\n  (ingreso.categoria === datosTransferencia.categoria) &&\n  (ingreso.monto === datosTransferencia.monto)\n}), 'Se encontro el ingreso en la cuenta destino')\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransferencia.cuentaOrigen) &&\n  (egreso.fecha === datosTransferencia.fecha) &&\n  (egreso.categoria === datosTransferencia.categoria) &&\n  (egreso.monto === datosTransferencia.monto)\n}), 'Se encontro el egreso en la cuenta origen')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaOrigen).fondos,\n  (datosTransferencia.saldoOrigenInicial),\n  'Se actualiza el saldo de la cuenta origen')",
            "err": {},
            "isRoot": false,
            "uuid": "6a0a7caa-e9ac-4583-afd2-7d51ee026574",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "4e02f74b-33a8-49d8-9d3c-be95d22fa49e",
          "54c168c2-4b70-4e8e-8e3f-7b252fd7cfa0",
          "ca4cf1c2-df65-4bb4-904c-1ad66eb18ee7",
          "3beb6a13-3a9a-4f5d-b3d5-6a1fd11d67a3",
          "2b383e2c-70bd-4a27-895a-69564e6815a0",
          "6a0a7caa-e9ac-4583-afd2-7d51ee026574"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 59,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "fb2dcaf7-78df-4812-9807-45ca270a6762",
        "title": "render tranferencia",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-etFinal/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "render tranferencia \"before each\" hook",
            "timedOut": false,
            "duration": 7,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'ahorros', fondos: 100, route: '/' })\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'comida', fondos: 0, route: '/' })\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransferencia__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store, propsData: { cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 100, route: '/' } }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "7f18f634-b72e-40ec-863f-470f464156cc",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Elementos del formulario renderizan",
            "fullTitle": "render tranferencia Elementos del formulario renderizan",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.find('#selectorCuentaTransferencia').exists(), true)\nassert.equal(wrapper.find('#montoTransferencia').exists(), true)\nassert.equal(wrapper.find('#menuCalendarioTransferencia').exists(), true)\nassert.equal(wrapper.find('#okCalendarioTransferencia').exists(), true)\nassert.equal(wrapper.find('#agregarTransferencia').exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "4e3c02c5-efd7-4eec-9998-11f1ce2f9656",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "4e3c02c5-efd7-4eec-9998-11f1ce2f9656"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3861bb87-ff9c-456d-bb37-dfe861fa9988",
        "title": "Cuenta, funcional",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-etFinal/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Cuenta, funcional \"before each\" hook",
            "timedOut": false,
            "duration": 12,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nrouter = new vue_router__WEBPACK_IMPORTED_MODULE_3__[\"default\"]()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_CrearWallet_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    router\n  })\nwrapper.setData({\n  nombre: '',\n  nombreExiste: false,\n  snackbar: false,\n  timeout: 2500,\n  snackbarText: ''\n})",
            "err": {},
            "isRoot": false,
            "uuid": "0b3029f4-3945-4fc4-8675-8f31b2160351",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Crear Cuenta, funcional",
            "fullTitle": "Cuenta, funcional Crear Cuenta, funcional",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.nombre = 'nuevaWallet'\nwrapper.vm.addCuenta()\nassert.exists(store.state.cuentas.find(cuenta => cuenta.nombre === 'nuevaWallet'),\n  'no se crea la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "f64d799e-c489-4372-8298-a8746750cb06",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "f64d799e-c489-4372-8298-a8746750cb06"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 6,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "926878c5-3dcc-42a8-91db-bad4e124e06e",
        "title": "Cuentas invalidas",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-etFinal/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Cuentas invalidas \"before each\" hook",
            "timedOut": false,
            "duration": 4,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nrouter = new vue_router__WEBPACK_IMPORTED_MODULE_3__[\"default\"]()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_CrearWallet_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    router\n  })\nwrapper.setData({\n  nombre: '',\n  nombreExiste: false,\n  snackbar: false,\n  timeout: 2500,\n  snackbarText: ''\n})",
            "err": {},
            "isRoot": false,
            "uuid": "4f7c071d-5a6a-42fc-a4b0-92cde4c1edf9",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "cuenta de nombre vacio",
            "fullTitle": "Cuentas invalidas cuenta de nombre vacio",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.nombre = ''\nwrapper.vm.addCuenta()\nassert.notExists(store.state.cuentas.find(cuenta => cuenta.nombre === ''),\n  'cuenta sin nombre creada')",
            "err": {},
            "isRoot": false,
            "uuid": "def58511-7670-46f4-9789-c33a5145937e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "cuenta de nombre Global",
            "fullTitle": "Cuentas invalidas cuenta de nombre Global",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const nombreGlobal = 'Global'\nwrapper.vm.nombre = nombreGlobal\nwrapper.vm.addCuenta()\nassert.equal(1, store.state.cuentas.filter(cuenta => cuenta.nombre === nombreGlobal).length,\n  'cuenta con nombre global creada')",
            "err": {},
            "isRoot": false,
            "uuid": "bc67b1ad-8ad6-428f-a7ba-570b3d37df3d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "cuenta de nombre ya existente",
            "fullTitle": "Cuentas invalidas cuenta de nombre ya existente",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const nombre = 'ahorros'\nstore.state.cuentas.push({ icon: 'account_balance', nombre: nombre, fondos: 0, route: '/' })\nwrapper.vm.nombre = nombre\nwrapper.vm.addCuenta()\nassert.equal(1, store.state.cuentas.filter(cuenta => cuenta.nombre === nombre).length,\n  'cuenta con nombre existente creada')",
            "err": {},
            "isRoot": false,
            "uuid": "9fbf5314-7ce9-4f4e-a461-1013c43bdac7",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "def58511-7670-46f4-9789-c33a5145937e",
          "bc67b1ad-8ad6-428f-a7ba-570b3d37df3d",
          "9fbf5314-7ce9-4f4e-a461-1013c43bdac7"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 6,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d377fa4e-d947-4a77-88be-07cec49e0005",
        "title": "Render crear cuenta",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-etFinal/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Render crear cuenta \"before each\" hook",
            "timedOut": false,
            "duration": 12,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nrouter = new vue_router__WEBPACK_IMPORTED_MODULE_3__[\"default\"]()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_CrearWallet_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    router\n  })\nwrapper.setData({\n  nombre: '',\n  nombreExiste: false,\n  snackbar: false,\n  timeout: 2500,\n  snackbarText: ''\n})",
            "err": {},
            "isRoot": false,
            "uuid": "bfbbde1a-f75f-418c-9324-587bffb5b994",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "elementos iniciales",
            "fullTitle": "Render crear cuenta elementos iniciales",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.find('.Header').exists(), true)\nassert.equal(wrapper.find('#nombreCrearCuenta').exists(), true)\nassert.equal(wrapper.find('#crearCuenta').exists(), true)\nassert.equal(wrapper.find('#volverHome').exists(), true)\nassert.equal(wrapper.find('#snackbarCrearCuenta').exists(), true)\nassert.equal(wrapper.find('#okSnackbar').exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "d73567fc-c158-425c-8ad8-4b98390ee45d",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "d73567fc-c158-425c-8ad8-4b98390ee45d"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 3,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4c0eacfe-28f3-4632-9e0f-a335e0c7515a",
        "title": "render cuenta manager",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-etFinal/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "render cuenta manager \"before each\" hook",
            "timedOut": false,
            "duration": 5,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push(store.state.cuentas.push({\n  icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/'\n}))\nrouter = new vue_router__WEBPACK_IMPORTED_MODULE_3__[\"default\"]()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_CuentaManager_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    router,\n    propsData: {\n      cuenta: {\n        icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/'\n      }\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "2e06ab3b-1f51-4b6e-9844-1c5e1f196c6a",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "render elementos inicales",
            "fullTitle": "render cuenta manager render elementos inicales",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.find('#listaIngresos').exists(), true)\nassert.equal(wrapper.find('#listaEgresos').exists(), true)\nassert.equal(wrapper.find('#informacionCuenta').exists(), true)\nassert.equal(wrapper.find('#herramientas').exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "69ab1f32-2ff7-4a42-82f9-05a11df97f0d",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "69ab1f32-2ff7-4a42-82f9-05a11df97f0d"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "aefbe204-247e-48f0-af86-71a2f187ef22",
        "title": "Cuenta Global",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-etFinal/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Cuenta Global \"before each\" hook",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push(store.state.cuentas.push({\n  icon: 'account_balance', nombre: 'Global', fondos: 0, route: '/'\n}))\nrouter = new vue_router__WEBPACK_IMPORTED_MODULE_3__[\"default\"]()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_CuentaManager_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    router,\n    propsData: {\n      cuenta: {\n        icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/'\n      }\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "89ba75a8-e717-444f-969a-921442c7a9a0",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Ingresos recibidos",
            "fullTitle": "Cuenta Global Ingresos recibidos",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.vm.ingresos.length, store.state.ingresos.length,\n  'no recibe todos los ingresos')",
            "err": {},
            "isRoot": false,
            "uuid": "3b3354c8-ca21-4711-9bc4-2a5283019560",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Egresos recibidos",
            "fullTitle": "Cuenta Global Egresos recibidos",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.vm.egresos.length, store.state.egresos.length,\n  'no recibe todos los egresos')",
            "err": {},
            "isRoot": false,
            "uuid": "10dc9bff-930c-4484-a1b4-61cdaec85814",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Saldo global",
            "fullTitle": "Cuenta Global Saldo global",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let saldoGlobal = 0\nstore.state.ingresos.forEach((ingreso) => {\n  saldoGlobal += Number(ingreso.monto)\n})\nstore.state.egresos.forEach((egreso) => {\n  saldoGlobal -= Number(egreso.monto)\n})\nassert.equal(wrapper.vm.saldo, saldoGlobal,\n  'calculos de saldo global erroneos')\nassert.equal(wrapper.vm.saldo, store.state.cuentas.find(cuenta => cuenta.nombre === 'Global').fondos,\n  'datos de saldo diferentes')",
            "err": {},
            "isRoot": false,
            "uuid": "702b0df5-a532-4942-b98e-3611777abf92",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "3b3354c8-ca21-4711-9bc4-2a5283019560",
          "10dc9bff-930c-4484-a1b4-61cdaec85814",
          "702b0df5-a532-4942-b98e-3611777abf92"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "279311fe-b0e0-4a5d-bd0a-c65000847c5e",
        "title": "render barra de herramientas",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-etFinal/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "render barra de herramientas \"before each\" hook",
            "timedOut": false,
            "duration": 6,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push(store.state.cuentas.push({\n  icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/'\n}))\nrouter = new vue_router__WEBPACK_IMPORTED_MODULE_3__[\"default\"]()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_Herramientas_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    router,\n    propsData: {\n      cuenta: {\n        icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/'\n      }\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "f33745e1-330d-4ce1-8549-e8f365dfeae4",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "render elementos inicales",
            "fullTitle": "render barra de herramientas render elementos inicales",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.find('#herramientaCategorias').exists(), true)\nassert.equal(wrapper.find('#botonReporte').exists(), true)\nassert.equal(wrapper.find('#alertaInferior').exists(), true)\nassert.equal(wrapper.find('#herramientaIngreso').exists(), true)\nassert.equal(wrapper.find('#herramientaEgreso').exists(), true)\nassert.equal(wrapper.find('#herramientaTransferencia').exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "88c53d3b-67b8-49d2-bbe0-4d53b23c91cf",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "render caso cuenta global",
            "fullTitle": "render barra de herramientas render caso cuenta global",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.cuenta = {\n  icon: 'account_balance', nombre: 'Global', fondos: 0, route: '/'\n}\nassert.equal(wrapper.find('#herramientaCategorias').exists(), true)\nassert.equal(wrapper.find('#botonReporte').exists(), true)\nassert.equal(wrapper.find('#alertaInferior').exists(), true)\nassert.equal(wrapper.find('#herramientaIngreso').exists(), false)\nassert.equal(wrapper.find('#herramientaEgreso').exists(), false)\nassert.equal(wrapper.find('#herramientaTransferencia').exists(), false)",
            "err": {},
            "isRoot": false,
            "uuid": "4318df22-da9d-4b52-b4b9-d8ce6b16b915",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "88c53d3b-67b8-49d2-bbe0-4d53b23c91cf",
          "4318df22-da9d-4b52-b4b9-d8ce6b16b915"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 11,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8cbc587d-c767-4806-8089-724014e2105a",
        "title": "Modificar datos cuenta",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-etFinal/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Modificar datos cuenta \"before each\" hook",
            "timedOut": false,
            "duration": 10,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push(store.state.cuentas.push({\n  icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/'\n}))\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_InformacionCuenta_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      cuentaActual: 'ahorros',\n      cuentaOriginal: 'ahorros',\n      fondos: 0\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "c1ff9a5e-ada4-42d5-95b1-d6522e104bbd",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "editar nombre de cuenta",
            "fullTitle": "Modificar datos cuenta editar nombre de cuenta",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const nuevoNombre = 'Emergencias'\nwrapper.vm.cuentaActual = nuevoNombre\nwrapper.vm.editarNombre()\nassert.exists(store.state.cuentas.find(cuenta => cuenta.nombre === nuevoNombre),\n  'El nombre no cambia')",
            "err": {},
            "isRoot": false,
            "uuid": "b528f696-0701-4cbb-9805-c42e52ad7e70",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "borrar cuenta",
            "fullTitle": "Modificar datos cuenta borrar cuenta",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const cuentaOriginal = wrapper.vm.cuentaOriginal\nwrapper.vm.borrarCuenta()\nassert.notExists(store.state.cuentas.find(cuenta => cuenta.nombre === cuentaOriginal),\n  'Aun existe la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "5251e4e8-a88c-40d4-bdcf-aa5eb822ccaf",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "b528f696-0701-4cbb-9805-c42e52ad7e70",
          "5251e4e8-a88c-40d4-bdcf-aa5eb822ccaf"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 9,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b4cc4345-1764-4e41-971d-a435b2f25be6",
        "title": "Nombres de cuenta invalidos",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-etFinal/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Nombres de cuenta invalidos \"before each\" hook",
            "timedOut": false,
            "duration": 5,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push(store.state.cuentas.push({\n  icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/'\n}))\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_InformacionCuenta_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      cuentaActual: 'ahorros',\n      cuentaOriginal: 'ahorros',\n      fondos: 0\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "8881c975-0199-465c-84f2-26d160685b8c",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Nombre vacio",
            "fullTitle": "Nombres de cuenta invalidos Nombre vacio",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.cuentaActual = ''\nwrapper.vm.editarNombre()\nassert.notExists(store.state.cuentas.find(cuenta => cuenta.nombre === ''),\n  'Se encontro cuenta vacia')\nassert.equal(wrapper.vm.alerta.visible, true, 'alerta no aparece')",
            "err": {},
            "isRoot": false,
            "uuid": "c81668f1-6ff3-4071-8c72-d65600ab74ee",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Nombre Global",
            "fullTitle": "Nombres de cuenta invalidos Nombre Global",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const nombreGlobal = 'Global'\nwrapper.vm.cuentaActual = nombreGlobal\nwrapper.vm.editarNombre()\nassert.equal(wrapper.vm.alerta.visible, true, 'alerta no aparece')\nassert.equal(store.state.cuentas.filter(cuenta => cuenta.nombre === nombreGlobal).length, 1,\n  'Dos cuentas globales existententes')",
            "err": {},
            "isRoot": false,
            "uuid": "3e862087-94d4-4a29-94ec-81b7d5704736",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Nombre repetido",
            "fullTitle": "Nombres de cuenta invalidos Nombre repetido",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const otraCuenta = 'Estudios'\nstore.state.cuentas.push({ icon: 'account_balance', nombre: otraCuenta, fondos: 0, route: '/' })\nwrapper.vm.cuentaActual = otraCuenta\nwrapper.vm.editarNombre()\nassert.equal(wrapper.vm.alerta.visible, true, 'alerta no aparece')\nassert.equal(store.state.cuentas.filter(cuenta => cuenta.nombre === otraCuenta).length, 1,\n  'Dos cuentas de mismo nombre')",
            "err": {},
            "isRoot": false,
            "uuid": "01a3e722-8001-46a5-a981-41ce4186f97c",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "c81668f1-6ff3-4071-8c72-d65600ab74ee",
          "3e862087-94d4-4a29-94ec-81b7d5704736",
          "01a3e722-8001-46a5-a981-41ce4186f97c"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 18,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "39727db1-6a6e-4e72-82e2-344bf50c4026",
        "title": "Borrar Cuentas invalidas",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-etFinal/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Borrar Cuentas invalidas \"before each\" hook",
            "timedOut": false,
            "duration": 5,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push(store.state.cuentas.push({\n  icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/'\n}))\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_InformacionCuenta_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      cuentaActual: 'ahorros',\n      cuentaOriginal: 'ahorros',\n      fondos: 0\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "20469905-e348-46fd-b2ba-01d393985959",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Borrar cuenta global",
            "fullTitle": "Borrar Cuentas invalidas Borrar cuenta global",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const nombreGlobal = 'Global'\nwrapper.vm.cuentaOriginal = nombreGlobal\nwrapper.vm.cuentaActual = nombreGlobal\nwrapper.vm.borrarCuenta()\nassert.exists(store.state.cuentas.find(cuenta => cuenta.nombre === nombreGlobal),\n  'Se borro la cuenta global')\nassert.equal(wrapper.vm.alerta.visible, true, 'alerta no aparece')",
            "err": {},
            "isRoot": false,
            "uuid": "89b749c7-3ee3-4c27-b1ce-e6ba355411a2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Borrar cuenta con saldo",
            "fullTitle": "Borrar Cuentas invalidas Borrar cuenta con saldo",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const cuentaOriginal = wrapper.vm.cuentaOriginal\nwrapper.vm.fondos = 100\nwrapper.vm.borrarCuenta()\nassert.exists(store.state.cuentas.find(cuenta => cuenta.nombre === cuentaOriginal),\n  'Se borro cuenta con fondos')\nassert.equal(wrapper.vm.alerta.visible, true, 'alerta no aparece')",
            "err": {},
            "isRoot": false,
            "uuid": "a7455e85-b42a-444a-ac37-dd3b6197efca",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Borrar cuenta con ingresos",
            "fullTitle": "Borrar Cuentas invalidas Borrar cuenta con ingresos",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const cuentaOriginal = wrapper.vm.cuentaOriginal\nstore.state.ingresos.push({\n  cuenta: cuentaOriginal,\n  fecha: '2019-05-23',\n  monto: 50,\n  categoria: 'Salario'\n})\nwrapper.vm.borrarCuenta()\nassert.exists(store.state.cuentas.find(cuenta => cuenta.nombre === cuentaOriginal),\n  'Se borro cuenta con Ingresos')\nassert.equal(wrapper.vm.alerta.visible, true, 'alerta no aparece')",
            "err": {},
            "isRoot": false,
            "uuid": "0befef80-b18f-4d8d-a4a8-b3af57447800",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Borrar cuenta con egresos",
            "fullTitle": "Borrar Cuentas invalidas Borrar cuenta con egresos",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const cuentaOriginal = wrapper.vm.cuentaOriginal\nstore.state.egresos.push({\n  cuenta: cuentaOriginal,\n  fecha: '2019-05-23',\n  monto: 50,\n  categoria: 'Otros'\n})\nwrapper.vm.borrarCuenta()\nassert.exists(store.state.cuentas.find(cuenta => cuenta.nombre === cuentaOriginal),\n  'Se borro cuenta con Egresos')\nassert.equal(wrapper.vm.alerta.visible, true, 'alerta no aparece')",
            "err": {},
            "isRoot": false,
            "uuid": "18f804ec-78be-4775-ba95-0eae8d63df3a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "89b749c7-3ee3-4c27-b1ce-e6ba355411a2",
          "a7455e85-b42a-444a-ac37-dd3b6197efca",
          "0befef80-b18f-4d8d-a4a8-b3af57447800",
          "18f804ec-78be-4775-ba95-0eae8d63df3a"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 8,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a692d59c-466d-47de-9fb5-2fe5c6046546",
        "title": "Render informacion cuenta",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-etFinal/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Render informacion cuenta \"before each\" hook",
            "timedOut": false,
            "duration": 5,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push(store.state.cuentas.push({\n  icon: 'account_balance',\n  nombre: 'ahorros',\n  fondos: 0,\n  route: '/'\n}))\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_InformacionCuenta_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      cuentaActual: 'ahorros',\n      cuentaOriginal: 'ahorros',\n      fondos: 0\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "61fae5fd-4afe-433e-b308-29c35493226f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Componentes iniciales renderizan",
            "fullTitle": "Render informacion cuenta Componentes iniciales renderizan",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.find('.titulo').exists(), true)\nassert.equal(wrapper.find('#nombreCuenta').exists(), true)\nassert.equal(wrapper.find('#editarCuenta').exists(), true)\nassert.equal(wrapper.find('#saldoCuenta').exists(), true)\nassert.equal(wrapper.find('#borrarCuenta').exists(), true)\nassert.equal(wrapper.find('#guardarCuenta').exists(), false)\nassert.equal(wrapper.find('#alertaSuperior').exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "c20bde32-3d4f-4b39-8ebd-a8c28b476491",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Boton editar cambia a guardar al click",
            "fullTitle": "Render informacion cuenta Boton editar cambia a guardar al click",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.find('#editarCuenta').exists(), true)\nassert.equal(wrapper.find('#guardarCuenta').exists(), false)\nwrapper.vm.edicion = true\nassert.equal(wrapper.find('#editarCuenta').exists(), false)\nassert.equal(wrapper.find('#guardarCuenta').exists(), true)\nwrapper.vm.edicion = false\nassert.equal(wrapper.find('#editarCuenta').exists(), true)\nassert.equal(wrapper.find('#guardarCuenta').exists(), false)",
            "err": {},
            "isRoot": false,
            "uuid": "3ee0abc2-0684-45b0-b661-bee3e9fb9a38",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "c20bde32-3d4f-4b39-8ebd-a8c28b476491",
          "3ee0abc2-0684-45b0-b661-bee3e9fb9a38"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 7,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "51f259e3-c972-48ef-a7fb-6a8d1bd9db78",
        "title": "render lista",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-etFinal/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "render lista \"before each\" hook",
            "timedOut": false,
            "duration": 7,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push(store.state.cuentas.push({\n  icon: 'account_balance', nombre: 'ahorros', fondos: 70, route: '/'\n}))\nstore.state.ingresos.unshift({\n  cuenta: 'ahorros',\n  fecha: '2019-05-23',\n  monto: 50,\n  categoria: 'Salario'\n})\nstore.state.ingresos.unshift({\n  cuenta: 'ahorros',\n  fecha: '2019-05-23',\n  monto: 50,\n  categoria: 'Salario'\n})\nstore.state.egresos.unshift({\n  cuenta: 'ahorros',\n  fecha: '2019-05-23',\n  monto: 30,\n  categoria: 'Salario'\n})\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_Lista_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      items: store.state.ingresos,\n      titulo: 'Ingresos',\n      cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 70, route: '/' }\n    }\n  })\nwrapper.setData({\n  cabecerasTabla: [\n    { text: 'Fecha',\n      align: 'left',\n      sortable: false,\n      value: 'fecha' },\n    { text: 'Monto', value: 'monto' },\n    { text: 'Categoria', value: 'categoria' }\n  ]\n})",
            "err": {},
            "isRoot": false,
            "uuid": "fba13238-2a1a-4425-beeb-da4d97a91bc7",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Cada ingreso aparece en la lista",
            "fullTitle": "render lista Cada ingreso aparece en la lista",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// store.state.ingresos.forEach((ingreso, index) => {\n//  assert.equal(wrapper.find('#' + wrapper.vm.cuenta.nombre + index).exists(), true)\n// })",
            "err": {},
            "isRoot": false,
            "uuid": "973081f0-069f-4f3d-aadf-567c302f540c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "render objetos iniciales",
            "fullTitle": "render lista render objetos iniciales",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.find('.titulo').exists(), true)\nassert.equal(wrapper.find('#tabla' + wrapper.vm.titulo).exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "5c6eb6a2-d513-4301-b880-3ac364f933c6",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "973081f0-069f-4f3d-aadf-567c302f540c",
          "5c6eb6a2-d513-4301-b880-3ac364f933c6"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4313501c-4acd-4cd5-9752-46a4bea36c28",
        "title": "Render nav",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-etFinal/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Render nav \"before each\" hook",
            "timedOut": false,
            "duration": 5,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_NavDrawer_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "94f584aa-b4b7-4e07-943a-a23c804343d1",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "renderiza parte inicial",
            "fullTitle": "Render nav renderiza parte inicial",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.find('#nav').exists(), true)\nassert.equal(wrapper.find('#Global').exists(), true)\nassert.equal(wrapper.find('#crearCuentaNav').exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "701b7658-5def-49dc-81dc-9d256f15f214",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "renderiza todas las cuentas",
            "fullTitle": "Render nav renderiza todas las cuentas",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "store.state.cuentas.push({\n  icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/'\n})\nstore.state.cuentas.forEach(cuenta => {\n  assert.equal(wrapper.find('#' + cuenta.nombre).exists(), true, cuenta.nombre + ' no renderiza')\n})",
            "err": {},
            "isRoot": false,
            "uuid": "dd2fe905-2c8b-4fdc-9848-4f8389a6f231",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "701b7658-5def-49dc-81dc-9d256f15f214",
          "dd2fe905-2c8b-4fdc-9848-4f8389a6f231"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 4,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6673d250-f7ba-4325-a9cd-3bff984965a5",
        "title": "Unit tests del reporte",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-etFinal/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook for \"Recibe las fechas con exito\"",
            "fullTitle": "Unit tests del reporte \"before each\" hook for \"Recibe las fechas con exito\"",
            "timedOut": false,
            "duration": 347,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "store = _Utils_ReportUtil_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getDefaultStore()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_1__[\"shallowMount\"])(_components_Report_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store\n  })",
            "err": {
              "message": "TypeError: Cannot read property 'nombre' of undefined",
              "estack": "TypeError: Cannot read property 'nombre' of undefined\n    at VueComponent.nuevoReporte (dist/webpack:/Report.vue:147:1)\n    at Watcher.get (dist/webpack:/node_modules/vue/dist/vue.runtime.esm.js:4473:1)\n    at Watcher.evaluate (dist/webpack:/node_modules/vue/dist/vue.runtime.esm.js:4578:1)\n    at VueComponent.computedGetter [as nuevoReporte] (dist/webpack:/node_modules/vue/dist/vue.runtime.esm.js:4830:1)\n    at Object.get (dist/webpack:/node_modules/vue/dist/vue.runtime.esm.js:2072:1)\n    at Proxy.render (dist/webpack:/src/components/Report.vue?c049:182:1)\n    at VueComponent.Vue._render (dist/webpack:/node_modules/vue/dist/vue.runtime.esm.js:3542:1)\n    at VueComponent.updateComponent (dist/webpack:/node_modules/vue/dist/vue.runtime.esm.js:4060:1)\n    at Watcher.get (dist/webpack:/node_modules/vue/dist/vue.runtime.esm.js:4473:1)\n    at new Watcher (dist/webpack:/node_modules/vue/dist/vue.runtime.esm.js:4462:1)\n    at mountComponent (dist/webpack:/node_modules/vue/dist/vue.runtime.esm.js:4067:1)\n    at VueComponent../node_modules/vue/dist/vue.runtime.esm.js.Vue.$mount (dist/webpack:/node_modules/vue/dist/vue.runtime.esm.js:8409:1)\n    at init (dist/webpack:/node_modules/vue/dist/vue.runtime.esm.js:3118:1)\n    at createComponent (dist/webpack:/node_modules/vue/dist/vue.runtime.esm.js:5972:1)\n    at createElm (dist/webpack:/node_modules/vue/dist/vue.runtime.esm.js:5919:1)\n    at VueComponent.patch [as __patch__] (dist/webpack:/node_modules/vue/dist/vue.runtime.esm.js:6471:1)\n    at VueComponent.Vue._update (dist/webpack:/node_modules/vue/dist/vue.runtime.esm.js:3939:1)\n    at VueComponent.updateComponent (dist/webpack:/node_modules/vue/dist/vue.runtime.esm.js:4060:1)\n    at Watcher.get (dist/webpack:/node_modules/vue/dist/vue.runtime.esm.js:4473:1)\n    at new Watcher (dist/webpack:/node_modules/vue/dist/vue.runtime.esm.js:4462:1)\n    at mountComponent (dist/webpack:/node_modules/vue/dist/vue.runtime.esm.js:4067:1)\n    at VueComponent../node_modules/vue/dist/vue.runtime.esm.js.Vue.$mount (dist/webpack:/node_modules/vue/dist/vue.runtime.esm.js:8409:1)\n    at mount (dist/webpack:/node_modules/@vue/test-utils/dist/vue-test-utils.js:8649:1)\n    at shallowMount (dist/webpack:/node_modules/@vue/test-utils/dist/vue-test-utils.js:8677:1)\n    at Context.<anonymous> (dist/webpack:/tests/unit/Reporte.spec.js:16:1)"
            },
            "isRoot": false,
            "uuid": "f637cc43-656e-4dcc-acc7-e8ca7a2bbe7f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Recibe las fechas con exito",
            "fullTitle": "Unit tests del reporte Recibe las fechas con exito",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var fechas = store.getters.obtenerFechas\nchai__WEBPACK_IMPORTED_MODULE_0__[\"assert\"].equal(fechas.length, 6)",
            "err": {},
            "isRoot": false,
            "uuid": "50d6fc3c-f4e9-4ab4-bf4b-8433e0eb8a71",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "Reporte obtenido con 6 objetos",
            "fullTitle": "Unit tests del reporte Reporte obtenido con 6 objetos",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "chai__WEBPACK_IMPORTED_MODULE_0__[\"assert\"].exists(wrapper.vm.nuevoReporte)\nchai__WEBPACK_IMPORTED_MODULE_0__[\"assert\"].lengthOf(wrapper.vm.nuevoReporte, 6)",
            "err": {},
            "isRoot": false,
            "uuid": "a1b21744-f39a-4a29-af35-fc957f1b0e2b",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "Categorias concatenadas para el filtro",
            "fullTitle": "Unit tests del reporte Categorias concatenadas para el filtro",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var catIngreso = store.state.categoriaIngresos\nvar catEgreso = store.state.categoriaEgresos\nvar concatenacion = store.getters.obtenerCategorias\nvar total = catIngreso.length + catEgreso.length\nchai__WEBPACK_IMPORTED_MODULE_0__[\"assert\"].isAtMost(concatenacion.length, total)",
            "err": {},
            "isRoot": false,
            "uuid": "3ca978b3-e400-40c2-b712-2f75414a0418",
            "isHook": false,
            "skipped": true
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [
          "50d6fc3c-f4e9-4ab4-bf4b-8433e0eb8a71",
          "a1b21744-f39a-4a29-af35-fc957f1b0e2b",
          "3ca978b3-e400-40c2-b712-2f75414a0418"
        ],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}