{
  "stats": {
    "suites": 5,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2019-05-16T23:19:22.026Z",
    "end": "2019-05-16T23:19:22.473Z",
    "duration": 447,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "d9e52c25-d2e3-4fd5-a7cc-3e0de04d6f76",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "40c28f0d-ca4c-4b07-be32-2be99c5e2c71",
        "title": "Unit tests relacionados a agregar una categoria",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-et/My-Personal-Wallet/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Unit tests relacionados a agregar una categoria \"before each\" hook",
            "timedOut": false,
            "duration": 7,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonCategorias_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store, propsData: { categoriaIngresos: store.state.categoriaIngresos, categoriaEgresos: store.state.categoriaEgresos }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "25af5b2e-081d-4b3d-b690-45f9e2dffc20",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Verificar que se inicie con 3  categorias, nunmero establecido en BRD",
            "fullTitle": "Unit tests relacionados a agregar una categoria Verificar que se inicie con 3  categorias, nunmero establecido en BRD",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(3, wrapper.vm.categoriaEgresos.length, 'Numero incorrecto de categorias de egreso inicial: ' + wrapper.vm.categoriaEgresos.length)\nassert.equal(3, wrapper.vm.categoriaIngresos.length, 'Numero incorrecto de categorias de ingreso inicial: ' + wrapper.vm.categoriaIngresos.length)",
            "err": {},
            "isRoot": false,
            "uuid": "6bfd5b6c-2df1-47a7-8231-fd08bf79efb1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Las nuevas categorias de guarden en la store",
            "fullTitle": "Unit tests relacionados a agregar una categoria Las nuevas categorias de guarden en la store",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.tipo = 'Ingreso'\nwrapper.vm.nombre = nombresPruebaIngreso[1]\nwrapper.vm.agregar()\nassert.equal(nombresPruebaIngreso[1], store.state.categoriaIngresos[0], 'No se agrega la categoria de ingreso')\nwrapper.vm.tipo = 'Egreso'\nwrapper.vm.nombre = nombresPruebaEgreso[1]\nwrapper.vm.agregar()\nassert.equal(nombresPruebaEgreso[1], store.state.categoriaEgresos[0], 'No se agrega la categoria de egreso')",
            "err": {},
            "isRoot": false,
            "uuid": "29a4a4fd-e9ac-4a68-937d-d1dd98629304",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "No se pueden agregar categorias existentes",
            "fullTitle": "Unit tests relacionados a agregar una categoria No se pueden agregar categorias existentes",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.tipo = 'Ingreso'\nwrapper.vm.nombre = nombresPruebaIngreso[0]\nwrapper.vm.agregar()\nassert.equal(3, store.state.categoriaIngresos.length, 'Se agrego una categoria repetida a Ingresos')\nwrapper.vm.tipo = 'Egreso'\nwrapper.vm.nombre = nombresPruebaEgreso[0]\nwrapper.vm.agregar()\nassert.equal(3, store.state.categoriaEgresos.length, 'Se agrego una categoria repetida a Egresos')",
            "err": {},
            "isRoot": false,
            "uuid": "71c5364d-5529-4f5e-b131-90afcb88ba33",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "6bfd5b6c-2df1-47a7-8231-fd08bf79efb1",
          "29a4a4fd-e9ac-4a68-937d-d1dd98629304",
          "71c5364d-5529-4f5e-b131-90afcb88ba33"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 27,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "dd46ae95-7ed2-4965-bea7-01fcd269503c",
        "title": "Unit tests relacionados a agregar un nuevo ingreso",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-et/My-Personal-Wallet/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Unit tests relacionados a agregar un nuevo ingreso \"before each\" hook",
            "timedOut": false,
            "duration": 13,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransacciones__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store, propsData: { tipo: 'Ingreso', cuenta: cuenta, categorias: store.state.categoriaIngresos }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "c1ac259f-aae6-41a7-a9be-ac3ab6150b1b",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Agrega el nuevo ingreso al inicio del array ingresos de la store",
            "fullTitle": "Unit tests relacionados a agregar un nuevo ingreso Agrega el nuevo ingreso al inicio del array ingresos de la store",
            "timedOut": false,
            "duration": 30,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.monto = datosTransaccion[0].monto\nwrapper.vm.fecha = datosTransaccion[0].fecha\nwrapper.vm.categoria = datosTransaccion[0].categoria\nwrapper.vm.agregar()\nassert.equal(datosTransaccion[0].cuenta, store.state.ingresos[0].cuenta, 'no se agrega la cuenta correctamente')\nassert.equal(datosTransaccion[0].fecha, store.state.ingresos[0].fecha, 'no se agrega la fecha correctamente')\nassert.equal(datosTransaccion[0].monto, store.state.ingresos[0].monto, 'no se agrega el monto correctamente')\nassert.equal(datosTransaccion[0].categoria, store.state.ingresos[0].categoria, 'no se agrega la categoria correctamente')\nassert.equal(220, store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion[0].cuenta).fondos, 'no se actualiza el saldo en la cuenta ' + store.state.cuentas[0].fondos)",
            "err": {},
            "isRoot": false,
            "uuid": "a1d18a21-55c6-4e68-a2f2-d0af0130f19f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "No se pueden agregar ingresos de montos menores o iguales a 0",
            "fullTitle": "Unit tests relacionados a agregar un nuevo ingreso No se pueden agregar ingresos de montos menores o iguales a 0",
            "timedOut": false,
            "duration": 40,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.monto = -9\nwrapper.vm.fecha = datosTransaccion[0].fecha\nwrapper.vm.categoria = datosTransaccion[0].categoria\nwrapper.vm.agregar()\nassert.equal(0, store.state.ingresos.length, 'se ha agregado un ingreso negativo, , ' + store.state.ingresos.length)\nwrapper.vm.monto = 0\nwrapper.vm.fecha = datosTransaccion[0].fecha\nwrapper.vm.categoria = datosTransaccion[0].categoria\nwrapper.vm.agregar()\nassert.equal(0, store.state.ingresos.length, 'se ha agregado un ingresode monto 0, ' + store.state.ingresos.length)",
            "err": {},
            "isRoot": false,
            "uuid": "43d7827e-ea44-4ba6-ae14-7db50365843d",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "a1d18a21-55c6-4e68-a2f2-d0af0130f19f",
          "43d7827e-ea44-4ba6-ae14-7db50365843d"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 70,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "09d24fd4-938b-4e67-abcf-75615d4d32e2",
        "title": "Unit tests relacionados a agregar un nuevo egreso",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-et/My-Personal-Wallet/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Unit tests relacionados a agregar un nuevo egreso \"before each\" hook",
            "timedOut": false,
            "duration": 13,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransacciones__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store, propsData: { tipo: 'Egreso', cuenta: cuenta, categorias: store.state.categoriaEgresos }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "f9b91934-752e-4d5c-90ce-3f9e51c9bf0e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Agrega el nuevo egreso al inicio del array egresos de la store",
            "fullTitle": "Unit tests relacionados a agregar un nuevo egreso Agrega el nuevo egreso al inicio del array egresos de la store",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.monto = datosTransaccion[0].monto\nwrapper.vm.fecha = datosTransaccion[0].fecha\nwrapper.vm.categoria = datosTransaccion[0].categoria\nwrapper.vm.agregar()\nassert.equal(datosTransaccion[0].cuenta, store.state.egresos[0].cuenta, 'no se agrega la cuenta correctamente')\nassert.equal(datosTransaccion[0].fecha, store.state.egresos[0].fecha, 'no se agrega la fecha correctamente')\nassert.equal(datosTransaccion[0].monto, store.state.egresos[0].monto, 'no se agrega el monto correctamente')\nassert.equal(datosTransaccion[0].categoria, store.state.egresos[0].categoria, 'no se agrega la categoria correctamente')\nassert.equal(90, store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion[0].cuenta).fondos, 'no se actualiza el saldo en la cuenta ')",
            "err": {},
            "isRoot": false,
            "uuid": "0ba88125-7df3-4b28-a55b-d75587cad93f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "No se pueden agregar egresos de montos menores o iguales a 0",
            "fullTitle": "Unit tests relacionados a agregar un nuevo egreso No se pueden agregar egresos de montos menores o iguales a 0",
            "timedOut": false,
            "duration": 33,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.monto = -9\nwrapper.vm.fecha = datosTransaccion[0].fecha\nwrapper.vm.categoria = datosTransaccion[0].categoria\nwrapper.vm.agregar()\nassert.equal(0, store.state.egresos.length, 'se ha agregado un egreso negativo')\nwrapper.vm.monto = 0\nwrapper.vm.fecha = datosTransaccion[0].fecha\nwrapper.vm.categoria = datosTransaccion[0].categoria\nwrapper.vm.agregar()\nassert.equal(0, store.state.egresos.length, 'se ha agregado un egreso de monto 0')",
            "err": {},
            "isRoot": false,
            "uuid": "6d95590d-577f-49b6-a295-feeb48c397d1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "No se puede hacer un egreso de monto mayor a tu saldo",
            "fullTitle": "Unit tests relacionados a agregar un nuevo egreso No se puede hacer un egreso de monto mayor a tu saldo",
            "timedOut": false,
            "duration": 18,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.monto = 150\nwrapper.vm.fecha = datosTransaccion[0].fecha\nwrapper.vm.categoria = datosTransaccion[0].categoria\nwrapper.vm.agregar()\nassert.equal(0, store.state.egresos.length, 'se ha realizado un egreso sin tener saldo suficiiente')",
            "err": {},
            "isRoot": false,
            "uuid": "f81e3ccd-1de9-4a4f-a652-46afc672893e",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "0ba88125-7df3-4b28-a55b-d75587cad93f",
          "6d95590d-577f-49b6-a295-feeb48c397d1",
          "f81e3ccd-1de9-4a4f-a652-46afc672893e"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 70,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4c22f8e5-5a00-49d7-92df-733f21497f35",
        "title": "Unit tests relacionados a hacer una transferencia",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-et/My-Personal-Wallet/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Unit tests relacionados a hacer una transferencia \"before each\" hook",
            "timedOut": false,
            "duration": 20,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransferencia__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store, propsData: { cuenta: cuenta }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "f6e697e3-26dc-4f09-9c41-e70d43fad59f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Agrega la transferencia al inicio del array egresos de la store",
            "fullTitle": "Unit tests relacionados a hacer una transferencia Agrega la transferencia al inicio del array egresos de la store",
            "timedOut": false,
            "duration": 16,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.monto = datosTransferencia[0].monto\nwrapper.vm.fecha = datosTransferencia[0].fecha\nwrapper.vm.cuentaDestino = datosTransferencia[0].cuenta\nwrapper.vm.transferir()\nassert.equal(cuenta.nombre, store.state.egresos[0].cuenta, 'no se agrega la cuenta de origen correctamente')\nassert.equal(datosTransferencia[0].fecha, store.state.egresos[0].fecha, 'no se agrega la fecha correctamente')\nassert.equal(datosTransferencia[0].monto, store.state.egresos[0].monto, 'no se agrega el monto correctamente')\nassert.equal(datosTransferencia[0].categoria, store.state.egresos[0].categoria, 'no se agrega la categoria correctamente')\nassert.equal(80, store.state.cuentas.find(cuentaAux => cuentaAux.nombre === cuenta.nombre).fondos, 'no se actualiza el saldo en la cuenta de origen')\nassert.equal(datosTransferencia[0].cuenta, store.state.ingresos[0].cuenta, 'no se agrega la cuenta destino correctamente')\nassert.equal(datosTransferencia[0].fecha, store.state.ingresos[0].fecha, 'no se agrega la fecha correctamente')\nassert.equal(datosTransferencia[0].monto, store.state.ingresos[0].monto, 'no se agrega el monto correctamente')\nassert.equal(datosTransferencia[0].categoria, store.state.ingresos[0].categoria, 'no se agrega la categoria correctamente')\nassert.equal(220, store.state.cuentas.find(cuentaAux => cuentaAux.nombre === datosTransferencia[0].cuenta).fondos, 'no se actualiza el saldo en la cuenta destino ' + store.state.cuentas.find(cuentaAux => cuentaAux.nombre === datosTransferencia[0].cuenta).fondos)",
            "err": {},
            "isRoot": false,
            "uuid": "38044dbc-5e8f-416a-bc5c-a04f7394bed4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "No se pueden agregar transferencias de montos menores o iguales a 0",
            "fullTitle": "Unit tests relacionados a hacer una transferencia No se pueden agregar transferencias de montos menores o iguales a 0",
            "timedOut": false,
            "duration": 36,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.monto = -9\nwrapper.vm.fecha = datosTransferencia[0].fecha\nwrapper.vm.cuentaDestino = datosTransferencia[0].cuenta\nwrapper.vm.transferir()\nassert.equal(0, store.state.egresos.length, 'se ha agregado un egreso de transferencia negativo')\nassert.equal(0, store.state.ingresos.length, 'se ha agregado un ingreso de transferencia negativo')\nwrapper.vm.monto = 0\nwrapper.vm.fecha = datosTransferencia[0].fecha\nwrapper.vm.cuentaDestino = datosTransferencia[0].cuenta\nwrapper.vm.transferir()\nassert.equal(0, store.state.egresos.length, 'se ha agregado un egreso de transferencia de monto 0')\nassert.equal(0, store.state.ingresos.length, 'se ha agregado un ingreso de transferencia de monto 0')",
            "err": {},
            "isRoot": false,
            "uuid": "7c253f62-6e4b-4b22-95d4-75a3c3372318",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "No se puede hacer una tranferencia de monto mayor a tu saldo",
            "fullTitle": "Unit tests relacionados a hacer una transferencia No se puede hacer una tranferencia de monto mayor a tu saldo",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.monto = 1000\nwrapper.vm.fecha = datosTransferencia[0].fecha\nwrapper.vm.cuenta = datosTransferencia[0].cuenta\nwrapper.vm.transferir()\nassert.equal(0, store.state.egresos.length, 'se ha realizado un egreso de transferencia sin tener saldo suficiiente')\nassert.equal(0, store.state.ingresos.length, 'se ha realizado un ingreso de transferencia sin tener saldo suficiiente')",
            "err": {},
            "isRoot": false,
            "uuid": "648a1307-fc43-4a74-8a6f-5fc4c80b06c9",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "38044dbc-5e8f-416a-bc5c-a04f7394bed4",
          "7c253f62-6e4b-4b22-95d4-75a3c3372318",
          "648a1307-fc43-4a74-8a6f-5fc4c80b06c9"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 65,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e8f6bb7b-76b2-49cd-a9ec-91497909bfb0",
        "title": "Unit tests del reporte",
        "fullFile": "/Users/abrahan/Desktop/JS/Wall-et/My-Personal-Wallet/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Unit tests del reporte \"before each\" hook",
            "timedOut": false,
            "duration": 12,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_ReportUtil_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getDefaultStore()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_1__[\"shallowMount\"])(_components_Report_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "88f93b12-848a-4aa8-8239-65dca045d00b",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Recibe las fechas con exito",
            "fullTitle": "Unit tests del reporte Recibe las fechas con exito",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var fechas = store.getters.obtenerFechas\nchai__WEBPACK_IMPORTED_MODULE_0__[\"assert\"].equal(fechas.length, 6)",
            "err": {},
            "isRoot": false,
            "uuid": "0bf37cdb-5c73-4080-856f-f35bbfde6dd9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Reporte obtenido con 6 objetos",
            "fullTitle": "Unit tests del reporte Reporte obtenido con 6 objetos",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai__WEBPACK_IMPORTED_MODULE_0__[\"assert\"].exists(wrapper.vm.nuevoReporte)\nchai__WEBPACK_IMPORTED_MODULE_0__[\"assert\"].lengthOf(wrapper.vm.nuevoReporte, 6)",
            "err": {},
            "isRoot": false,
            "uuid": "09ae78d6-9c11-4fb5-89c1-4caed83a09b8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Categorias concatenadas para el filtro",
            "fullTitle": "Unit tests del reporte Categorias concatenadas para el filtro",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var catIngreso = store.state.categoriaIngresos\nvar catEgreso = store.state.categoriaEgresos\nvar concatenacion = store.getters.obtenerCategorias\nvar total = catIngreso.length + catEgreso.length\nchai__WEBPACK_IMPORTED_MODULE_0__[\"assert\"].isAtMost(concatenacion.length, total)",
            "err": {},
            "isRoot": false,
            "uuid": "64c02c39-b49f-4e3a-8ed9-8d335d93d3f6",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "0bf37cdb-5c73-4080-856f-f35bbfde6dd9",
          "09ae78d6-9c11-4fb5-89c1-4caed83a09b8",
          "64c02c39-b49f-4e3a-8ed9-8d335d93d3f6"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}