{
  "stats": {
    "suites": 25,
    "tests": 62,
    "passes": 62,
    "pending": 0,
    "failures": 0,
    "start": "2019-05-23T21:15:40.087Z",
    "end": "2019-05-23T21:15:41.167Z",
    "duration": 1080,
    "testsRegistered": 62,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "cca4ee37-67be-4c2b-99da-7db8d4ec5016",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "56ca8b4c-3a64-4f38-b04a-87b60feb4462",
        "title": "categorias, test funcional",
        "fullFile": "/Users/abrahan/Desktop/JS/CERTI/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "categorias, test funcional \"before each\" hook",
            "timedOut": false,
            "duration": 12,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonCategorias_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      categoriaIngresos: store.state.categoriaIngresos,\n      categoriaEgresos: store.state.categoriaEgresos\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "c798b5c5-b4aa-4096-b52a-67a809b99827",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Crear categoria Ingreso, funcional",
            "fullTitle": "categorias, test funcional Crear categoria Ingreso, funcional",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const categoriaNueva = ['Ventas']\nwrapper.vm.tipo = 'Ingreso'\nwrapper.vm.nombre = categoriaNueva\nwrapper.vm.agregar()\nassert.exists(store.state.categoriaIngresos.find(categoria => categoria === categoriaNueva),\n  'No se encontro la nueva cateogira')",
            "err": {},
            "isRoot": false,
            "uuid": "81ebcbd0-5355-45d8-aece-f31937c48dd9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Crear categoria Egreso, funcional",
            "fullTitle": "categorias, test funcional Crear categoria Egreso, funcional",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const categoriaNueva = ['Compras']\nwrapper.vm.tipo = 'Egreso'\nwrapper.vm.nombre = categoriaNueva\nwrapper.vm.agregar()\nassert.exists(store.state.categoriaEgresos.find(categoria => categoria === categoriaNueva),\n  'No se encontro la nueva cateogira')",
            "err": {},
            "isRoot": false,
            "uuid": "3f55ffe3-8db6-40db-8227-bb33518bb2ee",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "81ebcbd0-5355-45d8-aece-f31937c48dd9",
          "3f55ffe3-8db6-40db-8227-bb33518bb2ee"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 19,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a12f2968-3fea-4005-8ad3-77658c7153d2",
        "title": "categorias render test",
        "fullFile": "/Users/abrahan/Desktop/JS/CERTI/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "categorias render test \"before each\" hook",
            "timedOut": false,
            "duration": 10,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonCategorias_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      categoriaIngresos: store.state.categoriaIngresos,\n      categoriaEgresos: store.state.categoriaEgresos\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "9ddfe7ea-a63b-4d2f-9e04-9937b088626a",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "elementos formulario renderizan",
            "fullTitle": "categorias render test elementos formulario renderizan",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.find('#selectorCategoria').exists(), true)\nassert.equal(wrapper.find('#nombreCategoria').exists(), true)\nassert.equal(wrapper.find('#agregarCategoria').exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "8bedda76-0ed4-4eae-97ec-d7c0542b31ed",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "8bedda76-0ed4-4eae-97ec-d7c0542b31ed"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 8,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ecdb7215-f402-48fa-93b8-c9bbb4e42289",
        "title": "Datos iniciales categorias",
        "fullFile": "/Users/abrahan/Desktop/JS/CERTI/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Datos iniciales categorias \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()",
            "err": {},
            "isRoot": false,
            "uuid": "98d8d432-9b72-4e9e-9df1-b2302acf966d",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Deberia tener 3 categorias de ingreso iniciales",
            "fullTitle": "Datos iniciales categorias Deberia tener 3 categorias de ingreso iniciales",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(3, store.state.categoriaIngresos.length,\n  'numero de categorias de ingresos: ' + store.state.categoriaIngresos.length)\nassert.exists(store.state.categoriaIngresos.find(categoria => categoria === 'Salario'),\n  'No esiste la categoria Salarios')\nassert.exists(store.state.categoriaIngresos.find(categoria => categoria === 'Transferencia'),\n  'No esiste la categoria Transferencia')\nassert.exists(store.state.categoriaIngresos.find(categoria => categoria === 'Otros'),\n  'No esiste la categoria Otros')",
            "err": {},
            "isRoot": false,
            "uuid": "bc70cb84-85d0-42f0-8533-b84d689d2c04",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Deberia tener 3 categorias de egreso iniciales",
            "fullTitle": "Datos iniciales categorias Deberia tener 3 categorias de egreso iniciales",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(3, store.state.categoriaEgresos.length,\n  'numero de categorias de egresos: ' + store.state.categoriaEgresos.length)\nassert.exists(store.state.categoriaEgresos.find(categoria => categoria === 'Expensas'),\n  'No esiste la categoria Expensas')\nassert.exists(store.state.categoriaEgresos.find(categoria => categoria === 'Transferencia'),\n  'No esiste la categoria Transferencia')\nassert.exists(store.state.categoriaEgresos.find(categoria => categoria === 'Otros'),\n  'No esiste la categoria Otros')",
            "err": {},
            "isRoot": false,
            "uuid": "fa7fb451-a36f-40bb-a262-f28bd4f09508",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "bc70cb84-85d0-42f0-8533-b84d689d2c04",
          "fa7fb451-a36f-40bb-a262-f28bd4f09508"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "568ae5c3-12c6-4ffb-a2b1-a29639aaf6fa",
        "title": "Categorias invalidas",
        "fullFile": "/Users/abrahan/Desktop/JS/CERTI/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Categorias invalidas \"before each\" hook",
            "timedOut": false,
            "duration": 11,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonCategorias_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      categoriaIngresos: store.state.categoriaIngresos,\n      categoriaEgresos: store.state.categoriaEgresos\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "a415efd2-e790-4621-8397-649cccae4547",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "no se puede crear categorias de ingreso con nombre vacio",
            "fullTitle": "Categorias invalidas no se puede crear categorias de ingreso con nombre vacio",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.tipo = 'Ingreso'\nwrapper.vm.nombre = ''\nwrapper.vm.agregar()\nassert.notExists(store.state.categoriaIngresos.find(categoria => categoria === ''))",
            "err": {},
            "isRoot": false,
            "uuid": "ef2226e7-ade2-49d3-885b-0c0457627681",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "no se puede crear categorias de egreso con nombre vacio",
            "fullTitle": "Categorias invalidas no se puede crear categorias de egreso con nombre vacio",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.tipo = 'Egreso'\nwrapper.vm.nombre = ''\nwrapper.vm.agregar()\nassert.notExists(store.state.categoriaEgresos.find(categoria => categoria === ''))",
            "err": {},
            "isRoot": false,
            "uuid": "e870774a-f323-4c4a-b164-c3bddbab08db",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "No se pueden agregar categorias de ingreso ya existentes",
            "fullTitle": "Categorias invalidas No se pueden agregar categorias de ingreso ya existentes",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const categoriaExistente = 'Salario'\nconst cantidadInicial = store.state.categoriaEgresos.length\nwrapper.vm.tipo = 'Ingreso'\nwrapper.vm.nombre = categoriaExistente\nwrapper.vm.agregar()\nassert.equal(store.state.categoriaIngresos.length, cantidadInicial)",
            "err": {},
            "isRoot": false,
            "uuid": "04655e38-7290-4d4c-a21b-5332c3806386",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "No se pueden agregar categorias de egreso ya existentes",
            "fullTitle": "Categorias invalidas No se pueden agregar categorias de egreso ya existentes",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const categoriaExistente = 'Expensas'\nconst cantidadInicial = store.state.categoriaEgresos.length\nwrapper.vm.tipo = 'Egreso'\nwrapper.vm.nombre = categoriaExistente\nwrapper.vm.agregar()\nassert.equal(store.state.categoriaEgresos.length, cantidadInicial)",
            "err": {},
            "isRoot": false,
            "uuid": "1864e83b-cb1a-4b53-90ed-6973017c7833",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "no se puede crear categorias sin tipo",
            "fullTitle": "Categorias invalidas no se puede crear categorias sin tipo",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const nombreCategoria = 'Supermercado'\nwrapper.vm.tipo = ''\nwrapper.vm.nombre = nombreCategoria\nwrapper.vm.agregar()\nassert.notExists(store.state.categoriaIngresos.find(categoria => categoria === nombreCategoria))\nassert.notExists(store.state.categoriaEgresos.find(categoria => categoria === nombreCategoria))",
            "err": {},
            "isRoot": false,
            "uuid": "05997923-a21c-48e2-864d-7895fb830b94",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "ef2226e7-ade2-49d3-885b-0c0457627681",
          "e870774a-f323-4c4a-b164-c3bddbab08db",
          "04655e38-7290-4d4c-a21b-5332c3806386",
          "1864e83b-cb1a-4b53-90ed-6973017c7833",
          "05997923-a21c-48e2-864d-7895fb830b94"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 33,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d01d59eb-f4fe-4250-8ed0-dce27ebaf0a3",
        "title": "Ingresos, funcional",
        "fullFile": "/Users/abrahan/Desktop/JS/CERTI/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Ingresos, funcional \"before each\" hook",
            "timedOut": false,
            "duration": 13,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/' })\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransacciones__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      tipo: 'Ingreso',\n      cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/' },\n      categorias: store.state.categoriaIngresos }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "e1d2c7ca-fa17-40f2-b64c-4e8ae610c30a",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Agregar Ingreso",
            "fullTitle": "Ingresos, funcional Agregar Ingreso",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: 120, categoria: 'Salario' }\nconst saldoInicial = 0\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.exists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransaccion.cuenta) &&\n  (ingreso.fecha === datosTransaccion.fecha) &&\n  (ingreso.categoria === datosTransaccion.categoria) &&\n  (ingreso.monto === datosTransaccion.monto)\n}), 'No se encontro el ingreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  (saldoInicial + datosTransaccion.monto), 'No se actualiza el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "21b33f05-9897-4ffc-a0c7-66e255abf081",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "21b33f05-9897-4ffc-a0c7-66e255abf081"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 22,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a5ab0502-f4d4-4b2a-9b1d-1fd31857ea78",
        "title": "Egresos, funcional",
        "fullFile": "/Users/abrahan/Desktop/JS/CERTI/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Egresos, funcional \"before each\" hook",
            "timedOut": false,
            "duration": 13,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/' })\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransacciones__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      tipo: 'Egreso',\n      cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 200, route: '/' },\n      categorias: store.state.categoriaEgresos }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "6c73d5fd-526c-4744-b01f-b0ab9cf45b78",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Agregar Egreso",
            "fullTitle": "Egresos, funcional Agregar Egreso",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: 100, categoria: 'Expensas' }\nconst saldoInicial = 200\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.exists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransaccion.cuenta) &&\n  (egreso.fecha === datosTransaccion.fecha) &&\n  (egreso.categoria === datosTransaccion.categoria) &&\n  (egreso.monto === datosTransaccion.monto)\n}), 'No se encontro el egreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  (saldoInicial - datosTransaccion.monto), 'No se actualiza el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "172a4d30-506a-40b3-b3d5-a9d907fe7fb7",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "172a4d30-506a-40b3-b3d5-a9d907fe7fb7"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 15,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e42c0d71-22fa-431a-982a-892c73b012a5",
        "title": "Ingresos invalidos",
        "fullFile": "/Users/abrahan/Desktop/JS/CERTI/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Ingresos invalidos \"before each\" hook",
            "timedOut": false,
            "duration": 9,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/' })\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransacciones__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      tipo: 'Ingreso',\n      cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/' },\n      categorias: store.state.categoriaIngresos }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "58e5e1a0-cd23-4cbd-bad8-8a7f02c4acea",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "categoria vacia",
            "fullTitle": "Ingresos invalidos categoria vacia",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: 100, categoria: '' }\nconst saldoInicial = 0\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransaccion.cuenta) &&\n  (ingreso.fecha === datosTransaccion.fecha) &&\n  (ingreso.categoria === datosTransaccion.categoria) &&\n  (ingreso.monto === datosTransaccion.monto)\n}), 'Se agrego el ingreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "bc027301-7f41-4005-b363-8bacba5f447f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "fecha vacia",
            "fullTitle": "Ingresos invalidos fecha vacia",
            "timedOut": false,
            "duration": 18,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '', monto: 100, categoria: 'Salario' }\nconst saldoInicial = 0\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransaccion.cuenta) &&\n  (ingreso.fecha === datosTransaccion.fecha) &&\n  (ingreso.categoria === datosTransaccion.categoria) &&\n  (ingreso.monto === datosTransaccion.monto)\n}), 'Se agrego el ingreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "89a518d8-03ce-4cdf-a722-9a7dbe8a1c76",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "monto nulo",
            "fullTitle": "Ingresos invalidos monto nulo",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: 0, categoria: 'Salario' }\nconst saldoInicial = 0\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransaccion.cuenta) &&\n  (ingreso.fecha === datosTransaccion.fecha) &&\n  (ingreso.categoria === datosTransaccion.categoria) &&\n  (ingreso.monto === datosTransaccion.monto)\n}), 'Se agrego el ingreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "11a7d706-d890-48bb-bb00-066b1899978a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "monto negativo",
            "fullTitle": "Ingresos invalidos monto negativo",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: -50, categoria: 'Salario' }\nconst saldoInicial = 0\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransaccion.cuenta) &&\n  (ingreso.fecha === datosTransaccion.fecha) &&\n  (ingreso.categoria === datosTransaccion.categoria) &&\n  (ingreso.monto === datosTransaccion.monto)\n}), 'Se agrego el ingreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "144a8ad2-9d18-4011-a775-4bfc6ba36ce2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "categoria inexistente",
            "fullTitle": "Ingresos invalidos categoria inexistente",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: 50, categoria: 'Tienda' }\nconst saldoInicial = 0\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransaccion.cuenta) &&\n  (ingreso.fecha === datosTransaccion.fecha) &&\n  (ingreso.categoria === datosTransaccion.categoria) &&\n  (ingreso.monto === datosTransaccion.monto)\n}), 'Se agrego el ingreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "9656f561-509c-428b-826c-cd4493d6e97c",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "bc027301-7f41-4005-b363-8bacba5f447f",
          "89a518d8-03ce-4cdf-a722-9a7dbe8a1c76",
          "11a7d706-d890-48bb-bb00-066b1899978a",
          "144a8ad2-9d18-4011-a775-4bfc6ba36ce2",
          "9656f561-509c-428b-826c-cd4493d6e97c"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 68,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2dde8cb0-9231-4fdc-b063-01cf6f49697c",
        "title": "Egresos invalidos",
        "fullFile": "/Users/abrahan/Desktop/JS/CERTI/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Egresos invalidos \"before each\" hook",
            "timedOut": false,
            "duration": 12,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'ahorros', fondos: 100, route: '/' })\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransacciones__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      tipo: 'Egreso',\n      cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 100, route: '/' },\n      categorias: store.state.categoriaEgresos }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "985c6e38-a38d-48f7-9595-a32b042a76b1",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "categoria vacia",
            "fullTitle": "Egresos invalidos categoria vacia",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: 50, categoria: '' }\nconst saldoInicial = 100\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransaccion.cuenta) &&\n  (egreso.fecha === datosTransaccion.fecha) &&\n  (egreso.categoria === datosTransaccion.categoria) &&\n  (egreso.monto === datosTransaccion.monto)\n}), 'Se agrego el egreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "0dc95dbc-fa19-40f2-9597-7a56aff3ad0b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "fecha vacia",
            "fullTitle": "Egresos invalidos fecha vacia",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '', monto: 50, categoria: 'Expensas' }\nconst saldoInicial = 100\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransaccion.cuenta) &&\n  (egreso.fecha === datosTransaccion.fecha) &&\n  (egreso.categoria === datosTransaccion.categoria) &&\n  (egreso.monto === datosTransaccion.monto)\n}), 'Se agrego el egreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "838424db-34fd-4a4b-9fff-50062c9dbe1b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "monto nulo",
            "fullTitle": "Egresos invalidos monto nulo",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: 0, categoria: 'Expensas' }\nconst saldoInicial = 100\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransaccion.cuenta) &&\n  (egreso.fecha === datosTransaccion.fecha) &&\n  (egreso.categoria === datosTransaccion.categoria) &&\n  (egreso.monto === datosTransaccion.monto)\n}), 'Se agrego el egreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "b44b5a0b-968e-46e1-88b1-abe4b857c4e1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "monto negativo",
            "fullTitle": "Egresos invalidos monto negativo",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: -50, categoria: 'Expensas' }\nconst saldoInicial = 100\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransaccion.cuenta) &&\n  (egreso.fecha === datosTransaccion.fecha) &&\n  (egreso.categoria === datosTransaccion.categoria) &&\n  (egreso.monto === datosTransaccion.monto)\n}), 'Se agrego el egreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "64f5f39f-4a17-4772-922a-ab3d04335dc7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "monto mayor al saldo",
            "fullTitle": "Egresos invalidos monto mayor al saldo",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: 200, categoria: 'Expensas' }\nconst saldoInicial = 100\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransaccion.cuenta) &&\n  (egreso.fecha === datosTransaccion.fecha) &&\n  (egreso.categoria === datosTransaccion.categoria) &&\n  (egreso.monto === datosTransaccion.monto)\n}), 'Se agrego el egreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "1d7ff0a5-c54a-476b-856e-ea79c81a9601",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "categoria inexistente",
            "fullTitle": "Egresos invalidos categoria inexistente",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransaccion = { cuenta: 'ahorros', fecha: '06/05/2019', monto: 50, categoria: 'Tienda' }\nconst saldoInicial = 100\nwrapper.vm.monto = datosTransaccion.monto\nwrapper.vm.fecha = datosTransaccion.fecha\nwrapper.vm.categoria = datosTransaccion.categoria\nwrapper.vm.agregar()\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransaccion.cuenta) &&\n  (egreso.fecha === datosTransaccion.fecha) &&\n  (egreso.categoria === datosTransaccion.categoria) &&\n  (egreso.monto === datosTransaccion.monto)\n}), 'Se agrego el egreso')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransaccion.cuenta).fondos,\n  saldoInicial, 'Se cambia el saldo de la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "63e648af-cf2c-4cb5-9844-a69d3c59d61a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "0dc95dbc-fa19-40f2-9597-7a56aff3ad0b",
          "838424db-34fd-4a4b-9fff-50062c9dbe1b",
          "b44b5a0b-968e-46e1-88b1-abe4b857c4e1",
          "64f5f39f-4a17-4772-922a-ab3d04335dc7",
          "1d7ff0a5-c54a-476b-856e-ea79c81a9601",
          "63e648af-cf2c-4cb5-9844-a69d3c59d61a"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 60,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ee0543e4-b010-4d74-a500-8519f433b423",
        "title": "Render test, transacciones",
        "fullFile": "/Users/abrahan/Desktop/JS/CERTI/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Render test, transacciones \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/' })",
            "err": {},
            "isRoot": false,
            "uuid": "7b0fa2f8-67ba-4eab-9785-b7422e295c2a",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "test ingreso",
            "fullTitle": "Render test, transacciones test ingreso",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransacciones__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      tipo: 'Ingreso',\n      cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/' },\n      categorias: store.state.categoriaIngresos }\n  })\nassert.equal(wrapper.find('#selectorIngreso').exists(), true)\nassert.equal(wrapper.find('#montoIngreso').exists(), true)\nassert.equal(wrapper.find('#menuCalendarioIngreso').exists(), true)\nassert.equal(wrapper.find('#okCalendarioIngreso').exists(), true)\nassert.equal(wrapper.find('#agregarIngreso').exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "b7f3d343-3902-47a8-a775-621eb9c68fa0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "test egreso",
            "fullTitle": "Render test, transacciones test egreso",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransacciones__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      tipo: 'Egreso',\n      cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/' },\n      categorias: store.state.categoriaIngresos }\n  })\nassert.equal(wrapper.find('#selectorEgreso').exists(), true)\nassert.equal(wrapper.find('#montoEgreso').exists(), true)\nassert.equal(wrapper.find('#menuCalendarioEgreso').exists(), true)\nassert.equal(wrapper.find('#okCalendarioEgreso').exists(), true)\nassert.equal(wrapper.find('#agregarEgreso').exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "87964bb3-4459-44bc-b509-66085cbfcd7a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "b7f3d343-3902-47a8-a775-621eb9c68fa0",
          "87964bb3-4459-44bc-b509-66085cbfcd7a"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 21,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b6b1258f-ed84-4b4b-bc03-6ceca7f066a0",
        "title": "Transferencia, funcional",
        "fullFile": "/Users/abrahan/Desktop/JS/CERTI/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Transferencia, funcional \"before each\" hook",
            "timedOut": false,
            "duration": 8,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'ahorros', fondos: 100, route: '/' })\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'comida', fondos: 0, route: '/' })\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransferencia__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store, propsData: { cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 100, route: '/' } }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "35ad2a93-37c5-4bfe-bab5-73abecf2d6b0",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Agregar Transferencia",
            "fullTitle": "Transferencia, funcional Agregar Transferencia",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransferencia = {\n  cuentaDestino: 'comida',\n  fecha: '2019-05-06',\n  monto: 50,\n  categoria: 'Transferencia',\n  cuentaOrigen: 'ahorros',\n  saldoOrigenInicial: 100,\n  saldoDestinoInicial: 0\n}\nwrapper.vm.monto = datosTransferencia.monto\nwrapper.vm.fecha = datosTransferencia.fecha\nwrapper.vm.cuentaDestino = datosTransferencia.cuentaDestino\nwrapper.vm.transferir()\nassert.exists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransferencia.cuentaDestino) &&\n  (ingreso.fecha === datosTransferencia.fecha) &&\n  (ingreso.categoria === datosTransferencia.categoria) &&\n  (ingreso.monto === datosTransferencia.monto)\n}), 'No se encontro el ingreso en la cuenta destino' + store.state.egresos.length)\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaDestino).fondos,\n  (datosTransferencia.saldoDestinoInicial + datosTransferencia.monto),\n  'No se actualiza el saldo de la cuenta Destino')\nassert.exists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransferencia.cuentaOrigen) &&\n  (egreso.fecha === datosTransferencia.fecha) &&\n  (egreso.categoria === datosTransferencia.categoria) &&\n  (egreso.monto === datosTransferencia.monto)\n}), 'No se encontro el egreso en la cuenta origen')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaOrigen).fondos,\n  (datosTransferencia.saldoOrigenInicial - datosTransferencia.monto),\n  'No se actualiza el saldo de la cuenta origen')",
            "err": {},
            "isRoot": false,
            "uuid": "0d8bf42c-c868-48a7-bd4f-59504c4d8683",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "0d8bf42c-c868-48a7-bd4f-59504c4d8683"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 10,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "82d90b90-cd88-4243-8aea-ae1d46511ccb",
        "title": "Transferencias invalidas",
        "fullFile": "/Users/abrahan/Desktop/JS/CERTI/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Transferencias invalidas \"before each\" hook",
            "timedOut": false,
            "duration": 9,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'ahorros', fondos: 100, route: '/' })\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'comida', fondos: 0, route: '/' })\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransferencia__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store, propsData: { cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 100, route: '/' } }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "bf982a12-9755-4437-9f12-8e8022a87eb7",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Fecha vacia",
            "fullTitle": "Transferencias invalidas Fecha vacia",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransferencia = {\n  cuentaDestino: 'comida',\n  fecha: '',\n  monto: 50,\n  categoria: 'Transferencia',\n  cuentaOrigen: 'ahorros',\n  saldoOrigenInicial: 100,\n  saldoDestinoInicial: 0\n}\nwrapper.vm.monto = datosTransferencia.monto\nwrapper.vm.fecha = datosTransferencia.fecha\nwrapper.vm.cuentaDestino = datosTransferencia.cuentaDestino\nwrapper.vm.transferir()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransferencia.cuentaDestino) &&\n  (ingreso.fecha === datosTransferencia.fecha) &&\n  (ingreso.categoria === datosTransferencia.categoria) &&\n  (ingreso.monto === datosTransferencia.monto)\n}), 'Se encontro el ingreso en la cuenta destino')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaDestino).fondos,\n  (datosTransferencia.saldoDestinoInicial),\n  'Se actualiza el saldo de la cuenta Destino')\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransferencia.cuentaOrigen) &&\n  (egreso.fecha === datosTransferencia.fecha) &&\n  (egreso.categoria === datosTransferencia.categoria) &&\n  (egreso.monto === datosTransferencia.monto)\n}), 'Se encontro el egreso en la cuenta origen')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaOrigen).fondos,\n  (datosTransferencia.saldoOrigenInicial),\n  'Se actualiza el saldo de la cuenta origen')",
            "err": {},
            "isRoot": false,
            "uuid": "23826966-68b2-4889-a557-dbd1b148a0f2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Cuenta destino vacia",
            "fullTitle": "Transferencias invalidas Cuenta destino vacia",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransferencia = {\n  cuentaDestino: '',\n  fecha: '2019-05-06',\n  monto: 50,\n  categoria: 'Transferencia',\n  cuentaOrigen: 'ahorros',\n  saldoOrigenInicial: 100,\n  saldoDestinoInicial: 0\n}\nwrapper.vm.monto = datosTransferencia.monto\nwrapper.vm.fecha = datosTransferencia.fecha\nwrapper.vm.cuentaDestino = datosTransferencia.cuentaDestino\nwrapper.vm.transferir()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransferencia.cuentaDestino) &&\n  (ingreso.fecha === datosTransferencia.fecha) &&\n  (ingreso.categoria === datosTransferencia.categoria) &&\n  (ingreso.monto === datosTransferencia.monto)\n}), 'Se encontro el ingreso en la cuenta destino')\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransferencia.cuentaOrigen) &&\n  (egreso.fecha === datosTransferencia.fecha) &&\n  (egreso.categoria === datosTransferencia.categoria) &&\n  (egreso.monto === datosTransferencia.monto)\n}), 'Se encontro el egreso en la cuenta origen')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaOrigen).fondos,\n  (datosTransferencia.saldoOrigenInicial),\n  'Se actualiza el saldo de la cuenta origen')",
            "err": {},
            "isRoot": false,
            "uuid": "02a9fc15-b3fd-4d07-8c4f-1b67c9cb356b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "monto nulo",
            "fullTitle": "Transferencias invalidas monto nulo",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransferencia = {\n  cuentaDestino: 'comida',\n  fecha: '2019-05-06',\n  monto: 0,\n  categoria: 'Transferencia',\n  cuentaOrigen: 'ahorros',\n  saldoOrigenInicial: 100,\n  saldoDestinoInicial: 0\n}\nwrapper.vm.monto = datosTransferencia.monto\nwrapper.vm.fecha = datosTransferencia.fecha\nwrapper.vm.cuentaDestino = datosTransferencia.cuentaDestino\nwrapper.vm.transferir()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransferencia.cuentaDestino) &&\n  (ingreso.fecha === datosTransferencia.fecha) &&\n  (ingreso.categoria === datosTransferencia.categoria) &&\n  (ingreso.monto === datosTransferencia.monto)\n}), 'Se encontro el ingreso en la cuenta destino')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaDestino).fondos,\n  (datosTransferencia.saldoDestinoInicial),\n  'Se actualiza el saldo de la cuenta Destino')\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransferencia.cuentaOrigen) &&\n  (egreso.fecha === datosTransferencia.fecha) &&\n  (egreso.categoria === datosTransferencia.categoria) &&\n  (egreso.monto === datosTransferencia.monto)\n}), 'Se encontro el egreso en la cuenta origen')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaOrigen).fondos,\n  (datosTransferencia.saldoOrigenInicial),\n  'Se actualiza el saldo de la cuenta origen')",
            "err": {},
            "isRoot": false,
            "uuid": "5f4996ad-904c-4848-bc70-c9219535ecde",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "monto negativo",
            "fullTitle": "Transferencias invalidas monto negativo",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransferencia = {\n  cuentaDestino: 'comida',\n  fecha: '2019-05-06',\n  monto: -30,\n  categoria: 'Transferencia',\n  cuentaOrigen: 'ahorros',\n  saldoOrigenInicial: 100,\n  saldoDestinoInicial: 0\n}\nwrapper.vm.monto = datosTransferencia.monto\nwrapper.vm.fecha = datosTransferencia.fecha\nwrapper.vm.cuentaDestino = datosTransferencia.cuentaDestino\nwrapper.vm.transferir()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransferencia.cuentaDestino) &&\n  (ingreso.fecha === datosTransferencia.fecha) &&\n  (ingreso.categoria === datosTransferencia.categoria) &&\n  (ingreso.monto === datosTransferencia.monto)\n}), 'Se encontro el ingreso en la cuenta destino')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaDestino).fondos,\n  (datosTransferencia.saldoDestinoInicial),\n  'Se actualiza el saldo de la cuenta Destino')\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransferencia.cuentaOrigen) &&\n  (egreso.fecha === datosTransferencia.fecha) &&\n  (egreso.categoria === datosTransferencia.categoria) &&\n  (egreso.monto === datosTransferencia.monto)\n}), 'Se encontro el egreso en la cuenta origen')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaOrigen).fondos,\n  (datosTransferencia.saldoOrigenInicial),\n  'Se actualiza el saldo de la cuenta origen')",
            "err": {},
            "isRoot": false,
            "uuid": "1e602dce-4703-4d9e-9d5f-59b47716be79",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "saldo insuficiente",
            "fullTitle": "Transferencias invalidas saldo insuficiente",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransferencia = {\n  cuentaDestino: 'comida',\n  fecha: '2019-05-06',\n  monto: 200,\n  categoria: 'Transferencia',\n  cuentaOrigen: 'ahorros',\n  saldoOrigenInicial: 100,\n  saldoDestinoInicial: 0\n}\nwrapper.vm.monto = datosTransferencia.monto\nwrapper.vm.fecha = datosTransferencia.fecha\nwrapper.vm.cuentaDestino = datosTransferencia.cuentaDestino\nwrapper.vm.transferir()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransferencia.cuentaDestino) &&\n  (ingreso.fecha === datosTransferencia.fecha) &&\n  (ingreso.categoria === datosTransferencia.categoria) &&\n  (ingreso.monto === datosTransferencia.monto)\n}), 'Se encontro el ingreso en la cuenta destino')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaDestino).fondos,\n  (datosTransferencia.saldoDestinoInicial),\n  'Se actualiza el saldo de la cuenta Destino')\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransferencia.cuentaOrigen) &&\n  (egreso.fecha === datosTransferencia.fecha) &&\n  (egreso.categoria === datosTransferencia.categoria) &&\n  (egreso.monto === datosTransferencia.monto)\n}), 'Se encontro el egreso en la cuenta origen')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaOrigen).fondos,\n  (datosTransferencia.saldoOrigenInicial),\n  'Se actualiza el saldo de la cuenta origen')",
            "err": {},
            "isRoot": false,
            "uuid": "cfb20576-c073-472b-b8d3-129fdfb9b96b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Destino inexistente",
            "fullTitle": "Transferencias invalidas Destino inexistente",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const datosTransferencia = {\n  cuentaDestino: 'banco',\n  fecha: '2019-05-06',\n  monto: 50,\n  categoria: 'Transferencia',\n  cuentaOrigen: 'ahorros',\n  saldoOrigenInicial: 100,\n  saldoDestinoInicial: 0\n}\nwrapper.vm.monto = datosTransferencia.monto\nwrapper.vm.fecha = datosTransferencia.fecha\nwrapper.vm.cuentaDestino = datosTransferencia.cuentaDestino\nwrapper.vm.transferir()\nassert.notExists(store.state.ingresos.find(function (ingreso) {\n  return (ingreso.cuenta === datosTransferencia.cuentaDestino) &&\n  (ingreso.fecha === datosTransferencia.fecha) &&\n  (ingreso.categoria === datosTransferencia.categoria) &&\n  (ingreso.monto === datosTransferencia.monto)\n}), 'Se encontro el ingreso en la cuenta destino')\nassert.notExists(store.state.egresos.find(function (egreso) {\n  return (egreso.cuenta === datosTransferencia.cuentaOrigen) &&\n  (egreso.fecha === datosTransferencia.fecha) &&\n  (egreso.categoria === datosTransferencia.categoria) &&\n  (egreso.monto === datosTransferencia.monto)\n}), 'Se encontro el egreso en la cuenta origen')\nassert.equal(store.state.cuentas.find(cuenta => cuenta.nombre === datosTransferencia.cuentaOrigen).fondos,\n  (datosTransferencia.saldoOrigenInicial),\n  'Se actualiza el saldo de la cuenta origen')",
            "err": {},
            "isRoot": false,
            "uuid": "c81797d6-653e-4e0d-ab25-5eb60fa51097",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "23826966-68b2-4889-a557-dbd1b148a0f2",
          "02a9fc15-b3fd-4d07-8c4f-1b67c9cb356b",
          "5f4996ad-904c-4848-bc70-c9219535ecde",
          "1e602dce-4703-4d9e-9d5f-59b47716be79",
          "cfb20576-c073-472b-b8d3-129fdfb9b96b",
          "c81797d6-653e-4e0d-ab25-5eb60fa51097"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 60,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "da2df9d4-0ef9-4b2d-b38a-c27e61b7d341",
        "title": "render tranferencia",
        "fullFile": "/Users/abrahan/Desktop/JS/CERTI/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "render tranferencia \"before each\" hook",
            "timedOut": false,
            "duration": 7,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'ahorros', fondos: 100, route: '/' })\nstore.state.cuentas.push({ icon: 'account_balance', nombre: 'comida', fondos: 0, route: '/' })\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_BotonTransferencia__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store, propsData: { cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 100, route: '/' } }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "ccf2c082-d8a2-4e59-8301-403501abe865",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Elementos del formulario renderizan",
            "fullTitle": "render tranferencia Elementos del formulario renderizan",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.find('#selectorCuentaTransferencia').exists(), true)\nassert.equal(wrapper.find('#montoTransferencia').exists(), true)\nassert.equal(wrapper.find('#menuCalendarioTransferencia').exists(), true)\nassert.equal(wrapper.find('#okCalendarioTransferencia').exists(), true)\nassert.equal(wrapper.find('#agregarTransferencia').exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "b139948c-5d05-48b4-8bd8-8cc2ed10608a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "b139948c-5d05-48b4-8bd8-8cc2ed10608a"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c1402a68-1eb1-4e64-b1b0-489822a05b5e",
        "title": "Cuenta, funcional",
        "fullFile": "/Users/abrahan/Desktop/JS/CERTI/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Cuenta, funcional \"before each\" hook",
            "timedOut": false,
            "duration": 14,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "localVue = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"createLocalVue\"])()\nlocalVue.use(vuex__WEBPACK_IMPORTED_MODULE_3__[\"default\"])\nlocalVue.use(vue_router__WEBPACK_IMPORTED_MODULE_4__[\"default\"])\nrouter = new vue_router__WEBPACK_IMPORTED_MODULE_4__[\"default\"]()\nstore = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_CrearWallet_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    localVue,\n    router\n  })\nwrapper.setData({\n  nombre: '',\n  nombreExiste: false,\n  snackbar: false,\n  timeout: 2500,\n  snackbarText: ''\n})",
            "err": {},
            "isRoot": false,
            "uuid": "72b7eaf7-5bdc-4ab6-9313-ed049833c92f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Crear Cuenta, funcional",
            "fullTitle": "Cuenta, funcional Crear Cuenta, funcional",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.nombre = 'nuevaWallet'\nwrapper.vm.addCuenta()\nassert.exists(store.state.cuentas.find(cuenta => cuenta.nombre === 'nuevaWallet'),\n  'no se crea la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "be2e4da7-caf5-4029-b99c-b922dc050931",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "be2e4da7-caf5-4029-b99c-b922dc050931"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 5,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b20bbb75-0c34-485e-9bf8-838285224425",
        "title": "Cuentas invalidas",
        "fullFile": "/Users/abrahan/Desktop/JS/CERTI/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Cuentas invalidas \"before each\" hook",
            "timedOut": false,
            "duration": 6,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nlocalVue = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"createLocalVue\"])()\nlocalVue.use(vuex__WEBPACK_IMPORTED_MODULE_3__[\"default\"])\nlocalVue.use(vue_router__WEBPACK_IMPORTED_MODULE_4__[\"default\"])\nrouter = new vue_router__WEBPACK_IMPORTED_MODULE_4__[\"default\"]()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_CrearWallet_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    localVue,\n    router\n  })\nwrapper.setData({\n  nombre: '',\n  nombreExiste: false,\n  snackbar: false,\n  timeout: 2500,\n  snackbarText: ''\n})",
            "err": {},
            "isRoot": false,
            "uuid": "15e09178-a93a-4274-b310-001744b6818e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "cuenta de nombre vacio",
            "fullTitle": "Cuentas invalidas cuenta de nombre vacio",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.nombre = ''\nwrapper.vm.addCuenta()\nassert.notExists(store.state.cuentas.find(cuenta => cuenta.nombre === ''),\n  'cuenta sin nombre creada')",
            "err": {},
            "isRoot": false,
            "uuid": "0e766acc-9fcb-4f0a-9ba2-508c68aa6451",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "cuenta de nombre Global",
            "fullTitle": "Cuentas invalidas cuenta de nombre Global",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const nombreGlobal = 'Global'\nwrapper.vm.nombre = nombreGlobal\nwrapper.vm.addCuenta()\nassert.equal(1, store.state.cuentas.filter(cuenta => cuenta.nombre === nombreGlobal).length,\n  'cuenta con nombre global creada')",
            "err": {},
            "isRoot": false,
            "uuid": "047d24ca-493e-49c8-abd8-d11efdd13855",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "cuenta de nombre ya existente",
            "fullTitle": "Cuentas invalidas cuenta de nombre ya existente",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const nombre = 'ahorros'\nstore.state.cuentas.push({ icon: 'account_balance', nombre: nombre, fondos: 0, route: '/' })\nwrapper.vm.nombre = nombre\nwrapper.vm.addCuenta()\nassert.equal(1, store.state.cuentas.filter(cuenta => cuenta.nombre === nombre).length,\n  'cuenta con nombre existente creada')",
            "err": {},
            "isRoot": false,
            "uuid": "b6b661d9-a79a-4c26-b790-a5609bf5ead1",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "0e766acc-9fcb-4f0a-9ba2-508c68aa6451",
          "047d24ca-493e-49c8-abd8-d11efdd13855",
          "b6b661d9-a79a-4c26-b790-a5609bf5ead1"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 6,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f80d5e67-031d-43a4-bb14-ed52edf64138",
        "title": "Render crear cuenta",
        "fullFile": "/Users/abrahan/Desktop/JS/CERTI/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Render crear cuenta \"before each\" hook",
            "timedOut": false,
            "duration": 6,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nlocalVue = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"createLocalVue\"])()\nlocalVue.use(vuex__WEBPACK_IMPORTED_MODULE_3__[\"default\"])\nlocalVue.use(vue_router__WEBPACK_IMPORTED_MODULE_4__[\"default\"])\nrouter = new vue_router__WEBPACK_IMPORTED_MODULE_4__[\"default\"]()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_CrearWallet_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    localVue,\n    router\n  })\nwrapper.setData({\n  nombre: '',\n  nombreExiste: false,\n  snackbar: false,\n  timeout: 2500,\n  snackbarText: ''\n})",
            "err": {},
            "isRoot": false,
            "uuid": "0b3dec5d-b9f3-4f0f-9fc9-b3155bf16211",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "elementos iniciales",
            "fullTitle": "Render crear cuenta elementos iniciales",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.find('.Header').exists(), true)\nassert.equal(wrapper.find('#nombreCrearCuenta').exists(), true)\nassert.equal(wrapper.find('#crearCuenta').exists(), true)\nassert.equal(wrapper.find('#volverHome').exists(), true)\nassert.equal(wrapper.find('#snackbarCrearCuenta').exists(), true)\nassert.equal(wrapper.find('#okSnackbar').exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "655b2b7c-4366-41b5-83f8-c4e0477ce59b",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "655b2b7c-4366-41b5-83f8-c4e0477ce59b"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 3,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2021a05b-64d7-4f8f-a9ef-c6829162b62f",
        "title": "render cuenta manager",
        "fullFile": "/Users/abrahan/Desktop/JS/CERTI/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "render cuenta manager \"before each\" hook",
            "timedOut": false,
            "duration": 6,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "localVue = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"createLocalVue\"])()\nlocalVue.use(vuex__WEBPACK_IMPORTED_MODULE_3__[\"default\"])\nlocalVue.use(vue_router__WEBPACK_IMPORTED_MODULE_4__[\"default\"])\nrouter = new vue_router__WEBPACK_IMPORTED_MODULE_4__[\"default\"]()\nstore = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push(store.state.cuentas.push({\n  icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/'\n}))\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_CuentaManager_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    localVue,\n    router,\n    store,\n    propsData: {\n      cuenta: {\n        icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/'\n      }\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "6e86abee-ba36-4cad-b55e-f669d647b19a",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "render elementos inicales",
            "fullTitle": "render cuenta manager render elementos inicales",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.find('#listaIngresos').exists(), true)\nassert.equal(wrapper.find('#listaEgresos').exists(), true)\nassert.equal(wrapper.find('#informacionCuenta').exists(), true)\nassert.equal(wrapper.find('#herramientas').exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "bb9734a4-974e-41e2-b93f-10318a84c17c",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "bb9734a4-974e-41e2-b93f-10318a84c17c"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d3e582e7-0e41-4c5f-bbc0-240d5c14e508",
        "title": "Cuenta Global",
        "fullFile": "/Users/abrahan/Desktop/JS/CERTI/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Cuenta Global \"before each\" hook",
            "timedOut": false,
            "duration": 16,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "localVue = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"createLocalVue\"])()\nlocalVue.use(vuex__WEBPACK_IMPORTED_MODULE_3__[\"default\"])\nlocalVue.use(vue_router__WEBPACK_IMPORTED_MODULE_4__[\"default\"])\nstore = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push(store.state.cuentas.push({\n  icon: 'account_balance', nombre: 'Global', fondos: 0, route: '/'\n}))\nrouter = new vue_router__WEBPACK_IMPORTED_MODULE_4__[\"default\"]()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_CuentaManager_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    router,\n    localVue,\n    propsData: {\n      cuenta: {\n        icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/'\n      }\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "cd15bd1a-6fe2-4624-b557-59aeb4ecd972",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Ingresos recibidos",
            "fullTitle": "Cuenta Global Ingresos recibidos",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.vm.ingresos.length, store.state.ingresos.length,\n  'no recibe todos los ingresos')",
            "err": {},
            "isRoot": false,
            "uuid": "199cb6f6-f559-42e2-aa7a-21edcaec3dcc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Egresos recibidos",
            "fullTitle": "Cuenta Global Egresos recibidos",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.vm.egresos.length, store.state.egresos.length,\n  'no recibe todos los egresos')",
            "err": {},
            "isRoot": false,
            "uuid": "b3240963-b579-4415-becb-b5d7139089a9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Saldo global",
            "fullTitle": "Cuenta Global Saldo global",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let saldoGlobal = 0\nstore.state.ingresos.forEach((ingreso) => {\n  saldoGlobal += Number(ingreso.monto)\n})\nstore.state.egresos.forEach((egreso) => {\n  saldoGlobal -= Number(egreso.monto)\n})\nassert.equal(wrapper.vm.saldo, saldoGlobal,\n  'calculos de saldo global erroneos')\nassert.equal(wrapper.vm.saldo, store.state.cuentas.find(cuenta => cuenta.nombre === 'Global').fondos,\n  'datos de saldo diferentes')",
            "err": {},
            "isRoot": false,
            "uuid": "523545cc-5a23-492e-a15e-1d421cb3cde9",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "199cb6f6-f559-42e2-aa7a-21edcaec3dcc",
          "b3240963-b579-4415-becb-b5d7139089a9",
          "523545cc-5a23-492e-a15e-1d421cb3cde9"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "992589c0-b895-4ae7-80d0-3be98c9c2c2e",
        "title": "render barra de herramientas",
        "fullFile": "/Users/abrahan/Desktop/JS/CERTI/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "render barra de herramientas \"before each\" hook",
            "timedOut": false,
            "duration": 9,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push(store.state.cuentas.push({\n  icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/'\n}))\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_Herramientas_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      cuenta: {\n        icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/'\n      }\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "6988e31b-ff08-402b-b532-db95383288f3",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "render elementos inicales",
            "fullTitle": "render barra de herramientas render elementos inicales",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.find('#herramientaCategorias').exists(), true)\nassert.equal(wrapper.find('#botonReporte').exists(), true)\nassert.equal(wrapper.find('#alertaInferior').exists(), true)\nassert.equal(wrapper.find('#herramientaIngreso').exists(), true)\nassert.equal(wrapper.find('#herramientaEgreso').exists(), true)\nassert.equal(wrapper.find('#herramientaTransferencia').exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "107eb39d-6223-441a-b1c4-c6cb6c32cbc4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "render caso cuenta global",
            "fullTitle": "render barra de herramientas render caso cuenta global",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.cuenta = {\n  icon: 'account_balance', nombre: 'Global', fondos: 0, route: '/'\n}\nassert.equal(wrapper.find('#herramientaCategorias').exists(), true)\nassert.equal(wrapper.find('#botonReporte').exists(), true)\nassert.equal(wrapper.find('#alertaInferior').exists(), true)\nassert.equal(wrapper.find('#herramientaIngreso').exists(), false)\nassert.equal(wrapper.find('#herramientaEgreso').exists(), false)\nassert.equal(wrapper.find('#herramientaTransferencia').exists(), false)",
            "err": {},
            "isRoot": false,
            "uuid": "b54faab1-f645-430d-a48c-d25653c84dcd",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "107eb39d-6223-441a-b1c4-c6cb6c32cbc4",
          "b54faab1-f645-430d-a48c-d25653c84dcd"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 16,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f10eb705-db89-4f24-88a3-1dcbc5db4f51",
        "title": "Modificar datos cuenta",
        "fullFile": "/Users/abrahan/Desktop/JS/CERTI/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Modificar datos cuenta \"before each\" hook",
            "timedOut": false,
            "duration": 11,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push(store.state.cuentas.push({\n  icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/'\n}))\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_InformacionCuenta_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      cuentaActual: 'ahorros',\n      cuentaOriginal: 'ahorros',\n      fondos: 0\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "8d7751c3-9471-4387-99de-55a3d8b00222",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "editar nombre de cuenta",
            "fullTitle": "Modificar datos cuenta editar nombre de cuenta",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const nuevoNombre = 'Emergencias'\nwrapper.vm.cuentaActual = nuevoNombre\nwrapper.vm.editarNombre()\nassert.exists(store.state.cuentas.find(cuenta => cuenta.nombre === nuevoNombre),\n  'El nombre no cambia')",
            "err": {},
            "isRoot": false,
            "uuid": "f3e1956b-6dfa-45b2-85de-111221280d30",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "borrar cuenta",
            "fullTitle": "Modificar datos cuenta borrar cuenta",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const cuentaOriginal = wrapper.vm.cuentaOriginal\nwrapper.vm.borrarCuenta()\nassert.notExists(store.state.cuentas.find(cuenta => cuenta.nombre === cuentaOriginal),\n  'Aun existe la cuenta')",
            "err": {},
            "isRoot": false,
            "uuid": "ac7d90d2-b21c-4db8-a948-b672d2e7afc8",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "f3e1956b-6dfa-45b2-85de-111221280d30",
          "ac7d90d2-b21c-4db8-a948-b672d2e7afc8"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 11,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "53654f03-7a7f-4a75-b7cc-32a0b0290205",
        "title": "Nombres de cuenta invalidos",
        "fullFile": "/Users/abrahan/Desktop/JS/CERTI/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Nombres de cuenta invalidos \"before each\" hook",
            "timedOut": false,
            "duration": 9,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push(store.state.cuentas.push({\n  icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/'\n}))\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_InformacionCuenta_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      cuentaActual: 'ahorros',\n      cuentaOriginal: 'ahorros',\n      fondos: 0\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "97d5af72-54d1-4e0a-b63b-70137b19fd1e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Nombre vacio",
            "fullTitle": "Nombres de cuenta invalidos Nombre vacio",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "wrapper.vm.cuentaActual = ''\nwrapper.vm.editarNombre()\nassert.notExists(store.state.cuentas.find(cuenta => cuenta.nombre === ''),\n  'Se encontro cuenta vacia')\nassert.equal(wrapper.vm.alerta.visible, true, 'alerta no aparece')",
            "err": {},
            "isRoot": false,
            "uuid": "5e148bb0-7399-49f1-921a-16963261f898",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Nombre Global",
            "fullTitle": "Nombres de cuenta invalidos Nombre Global",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const nombreGlobal = 'Global'\nwrapper.vm.cuentaActual = nombreGlobal\nwrapper.vm.editarNombre()\nassert.equal(wrapper.vm.alerta.visible, true, 'alerta no aparece')\nassert.equal(store.state.cuentas.filter(cuenta => cuenta.nombre === nombreGlobal).length, 1,\n  'Dos cuentas globales existententes')",
            "err": {},
            "isRoot": false,
            "uuid": "6a80dac7-3294-47d3-9129-5119c45c0761",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Nombre repetido",
            "fullTitle": "Nombres de cuenta invalidos Nombre repetido",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const otraCuenta = 'Estudios'\nstore.state.cuentas.push({ icon: 'account_balance', nombre: otraCuenta, fondos: 0, route: '/' })\nwrapper.vm.cuentaActual = otraCuenta\nwrapper.vm.editarNombre()\nassert.equal(wrapper.vm.alerta.visible, true, 'alerta no aparece')\nassert.equal(store.state.cuentas.filter(cuenta => cuenta.nombre === otraCuenta).length, 1,\n  'Dos cuentas de mismo nombre')",
            "err": {},
            "isRoot": false,
            "uuid": "24441c6b-cacc-454e-a92d-23aa9460409a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "5e148bb0-7399-49f1-921a-16963261f898",
          "6a80dac7-3294-47d3-9129-5119c45c0761",
          "24441c6b-cacc-454e-a92d-23aa9460409a"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 25,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2032bc33-8be2-47b8-9f21-50743791fa0f",
        "title": "Borrar Cuentas invalidas",
        "fullFile": "/Users/abrahan/Desktop/JS/CERTI/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Borrar Cuentas invalidas \"before each\" hook",
            "timedOut": false,
            "duration": 8,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push(store.state.cuentas.push({\n  icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/'\n}))\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_InformacionCuenta_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      cuentaActual: 'ahorros',\n      cuentaOriginal: 'ahorros',\n      fondos: 0\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "9cbf837b-587a-4950-b77c-c9c3c6d9d753",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Borrar cuenta global",
            "fullTitle": "Borrar Cuentas invalidas Borrar cuenta global",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const nombreGlobal = 'Global'\nwrapper.vm.cuentaOriginal = nombreGlobal\nwrapper.vm.cuentaActual = nombreGlobal\nwrapper.vm.borrarCuenta()\nassert.exists(store.state.cuentas.find(cuenta => cuenta.nombre === nombreGlobal),\n  'Se borro la cuenta global')\nassert.equal(wrapper.vm.alerta.visible, true, 'alerta no aparece')",
            "err": {},
            "isRoot": false,
            "uuid": "766c818b-48b6-45d7-ba8f-5eb9537bace5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Borrar cuenta con saldo",
            "fullTitle": "Borrar Cuentas invalidas Borrar cuenta con saldo",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const cuentaOriginal = wrapper.vm.cuentaOriginal\nwrapper.vm.fondos = 100\nwrapper.vm.borrarCuenta()\nassert.exists(store.state.cuentas.find(cuenta => cuenta.nombre === cuentaOriginal),\n  'Se borro cuenta con fondos')\nassert.equal(wrapper.vm.alerta.visible, true, 'alerta no aparece')",
            "err": {},
            "isRoot": false,
            "uuid": "db6bece9-ab95-44fa-bfd2-54f628691134",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Borrar cuenta con ingresos",
            "fullTitle": "Borrar Cuentas invalidas Borrar cuenta con ingresos",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const cuentaOriginal = wrapper.vm.cuentaOriginal\nstore.state.ingresos.push({\n  cuenta: cuentaOriginal,\n  fecha: '2019-05-23',\n  monto: 50,\n  categoria: 'Salario'\n})\nwrapper.vm.borrarCuenta()\nassert.exists(store.state.cuentas.find(cuenta => cuenta.nombre === cuentaOriginal),\n  'Se borro cuenta con Ingresos')\nassert.equal(wrapper.vm.alerta.visible, true, 'alerta no aparece')",
            "err": {},
            "isRoot": false,
            "uuid": "2e46b097-acfd-4e75-9604-b59837993ec2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Borrar cuenta con egresos",
            "fullTitle": "Borrar Cuentas invalidas Borrar cuenta con egresos",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const cuentaOriginal = wrapper.vm.cuentaOriginal\nstore.state.egresos.push({\n  cuenta: cuentaOriginal,\n  fecha: '2019-05-23',\n  monto: 50,\n  categoria: 'Otros'\n})\nwrapper.vm.borrarCuenta()\nassert.exists(store.state.cuentas.find(cuenta => cuenta.nombre === cuentaOriginal),\n  'Se borro cuenta con Egresos')\nassert.equal(wrapper.vm.alerta.visible, true, 'alerta no aparece')",
            "err": {},
            "isRoot": false,
            "uuid": "1ba9bdfc-95ee-4112-a159-0804857fb37e",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "766c818b-48b6-45d7-ba8f-5eb9537bace5",
          "db6bece9-ab95-44fa-bfd2-54f628691134",
          "2e46b097-acfd-4e75-9604-b59837993ec2",
          "1ba9bdfc-95ee-4112-a159-0804857fb37e"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 17,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b0475b2e-83ca-424c-9d47-f8fd49f51d2d",
        "title": "Render informacion cuenta",
        "fullFile": "/Users/abrahan/Desktop/JS/CERTI/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Render informacion cuenta \"before each\" hook",
            "timedOut": false,
            "duration": 8,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push(store.state.cuentas.push({\n  icon: 'account_balance',\n  nombre: 'ahorros',\n  fondos: 0,\n  route: '/'\n}))\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_InformacionCuenta_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      cuentaActual: 'ahorros',\n      cuentaOriginal: 'ahorros',\n      fondos: 0\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "27cec11f-d45b-4dd3-b987-43e3640bc86b",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Componentes iniciales renderizan",
            "fullTitle": "Render informacion cuenta Componentes iniciales renderizan",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.find('.titulo').exists(), true)\nassert.equal(wrapper.find('#nombreCuenta').exists(), true)\nassert.equal(wrapper.find('#editarCuenta').exists(), true)\nassert.equal(wrapper.find('#saldoCuenta').exists(), true)\nassert.equal(wrapper.find('#borrarCuenta').exists(), true)\nassert.equal(wrapper.find('#guardarCuenta').exists(), false)\nassert.equal(wrapper.find('#alertaSuperior').exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "d2bf3fb7-9d28-4ada-b115-74d6eb7e4255",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Boton editar cambia a guardar al click",
            "fullTitle": "Render informacion cuenta Boton editar cambia a guardar al click",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.find('#editarCuenta').exists(), true)\nassert.equal(wrapper.find('#guardarCuenta').exists(), false)\nwrapper.vm.edicion = true\nassert.equal(wrapper.find('#editarCuenta').exists(), false)\nassert.equal(wrapper.find('#guardarCuenta').exists(), true)\nwrapper.vm.edicion = false\nassert.equal(wrapper.find('#editarCuenta').exists(), true)\nassert.equal(wrapper.find('#guardarCuenta').exists(), false)",
            "err": {},
            "isRoot": false,
            "uuid": "191408ce-279f-4f78-bdb8-39ed33858783",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "d2bf3fb7-9d28-4ada-b115-74d6eb7e4255",
          "191408ce-279f-4f78-bdb8-39ed33858783"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 8,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b6e015af-88ad-42b6-9c68-730167042749",
        "title": "render lista",
        "fullFile": "/Users/abrahan/Desktop/JS/CERTI/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "render lista \"before each\" hook",
            "timedOut": false,
            "duration": 6,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nstore.state.cuentas.push({\n  icon: 'account_balance', nombre: 'ahorros', fondos: 70, route: '/'\n})\nstore.state.ingresos.unshift({\n  cuenta: 'ahorros',\n  fecha: '2019-05-23',\n  monto: 50,\n  categoria: 'Salario'\n})\nstore.state.ingresos.unshift({\n  cuenta: 'ahorros',\n  fecha: '2019-05-23',\n  monto: 50,\n  categoria: 'Salario'\n})\nstore.state.egresos.unshift({\n  cuenta: 'ahorros',\n  fecha: '2019-05-23',\n  monto: 30,\n  categoria: 'Salario'\n})\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_Lista_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      items: store.state.ingresos,\n      titulo: 'Ingresos',\n      cuenta: { icon: 'account_balance', nombre: 'ahorros', fondos: 70, route: '/' }\n    }\n  })\nwrapper.setData({\n  cabecerasTabla: [\n    { text: 'Fecha',\n      align: 'left',\n      sortable: false,\n      value: 'fecha' },\n    { text: 'Monto', value: 'monto' },\n    { text: 'Categoria', value: 'categoria' }\n  ]\n})",
            "err": {},
            "isRoot": false,
            "uuid": "a95370c3-9218-4407-800a-da66e43d2ad3",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Cada ingreso aparece en la lista",
            "fullTitle": "render lista Cada ingreso aparece en la lista",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// store.state.ingresos.forEach((ingreso, index) => {\n//  assert.equal(wrapper.find('#' + wrapper.vm.cuenta.nombre + index).exists(), true)\n// })",
            "err": {},
            "isRoot": false,
            "uuid": "4a4b00a9-ac82-4c2b-a50c-7d7053346947",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "render objetos iniciales",
            "fullTitle": "render lista render objetos iniciales",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.find('.titulo').exists(), true)\nassert.equal(wrapper.find('#tabla' + wrapper.vm.titulo).exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "d84c7ef4-9368-4e99-8d49-33ab1b023936",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "4a4b00a9-ac82-4c2b-a50c-7d7053346947",
          "d84c7ef4-9368-4e99-8d49-33ab1b023936"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1dee7825-1984-440d-bae3-85107bbcb889",
        "title": "Render nav",
        "fullFile": "/Users/abrahan/Desktop/JS/CERTI/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Render nav \"before each\" hook",
            "timedOut": false,
            "duration": 14,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _src_Utils_TestUtil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDefaultStore()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_0__[\"shallowMount\"])(_components_NavDrawer_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "cdf0cf4c-e8e0-4915-a52a-4ea2050dea3f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "renderiza parte inicial",
            "fullTitle": "Render nav renderiza parte inicial",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(wrapper.find('#nav').exists(), true)\nassert.equal(wrapper.find('#Global').exists(), true)\nassert.equal(wrapper.find('#crearCuentaNav').exists(), true)",
            "err": {},
            "isRoot": false,
            "uuid": "c7420b7d-eb4e-464a-a1ac-e43bdddc103a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "renderiza todas las cuentas",
            "fullTitle": "Render nav renderiza todas las cuentas",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "store.state.cuentas.push({\n  icon: 'account_balance', nombre: 'ahorros', fondos: 0, route: '/'\n})\nstore.state.cuentas.forEach(cuenta => {\n  assert.equal(wrapper.find('#' + cuenta.nombre).exists(), true, cuenta.nombre + ' no renderiza')\n})",
            "err": {},
            "isRoot": false,
            "uuid": "ea59e3f5-0ebf-4c4d-bc0b-3de632f4e2d3",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "c7420b7d-eb4e-464a-a1ac-e43bdddc103a",
          "ea59e3f5-0ebf-4c4d-bc0b-3de632f4e2d3"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 8,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9c76ed23-6437-48b4-ac5f-b205dc8eed10",
        "title": "Unit tests del reporte",
        "fullFile": "/Users/abrahan/Desktop/JS/CERTI/Walle-et/dist/main.js",
        "file": "/dist/main.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Unit tests del reporte \"before each\" hook",
            "timedOut": false,
            "duration": 16,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "store = _Utils_ReportUtil_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getDefaultStore()\nwrapper = Object(_vue_test_utils__WEBPACK_IMPORTED_MODULE_1__[\"shallowMount\"])(_components_Report_vue__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  {\n    store,\n    propsData: {\n      cuenta: { nombre: 'ahorros', fondos: 100 }\n    }\n  })",
            "err": {},
            "isRoot": false,
            "uuid": "44438f9b-4669-44ff-aa19-c7cbfcae29ff",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Recibe las fechas con exito",
            "fullTitle": "Unit tests del reporte Recibe las fechas con exito",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var fechas = store.getters.obtenerFechas\nchai__WEBPACK_IMPORTED_MODULE_0__[\"assert\"].equal(fechas.length, 6)",
            "err": {},
            "isRoot": false,
            "uuid": "f1f8d79d-ebe6-43b1-a104-152204f256b2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Reporte obtenido con 6 objetos",
            "fullTitle": "Unit tests del reporte Reporte obtenido con 6 objetos",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai__WEBPACK_IMPORTED_MODULE_0__[\"assert\"].exists(wrapper.vm.nuevoReporte)\nchai__WEBPACK_IMPORTED_MODULE_0__[\"assert\"].lengthOf(wrapper.vm.nuevoReporte, 6)",
            "err": {},
            "isRoot": false,
            "uuid": "33f280b4-53b9-4eee-89e5-c8dea88abd89",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Categorias concatenadas para el filtro",
            "fullTitle": "Unit tests del reporte Categorias concatenadas para el filtro",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var catIngreso = store.state.categoriaIngresos\nvar catEgreso = store.state.categoriaEgresos\nvar concatenacion = store.getters.obtenerCategorias\nvar total = catIngreso.length + catEgreso.length\nchai__WEBPACK_IMPORTED_MODULE_0__[\"assert\"].isAtMost(concatenacion.length, total)",
            "err": {},
            "isRoot": false,
            "uuid": "1089d966-defe-483b-96a4-a837f27af9ff",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "f1f8d79d-ebe6-43b1-a104-152204f256b2",
          "33f280b4-53b9-4eee-89e5-c8dea88abd89",
          "1089d966-defe-483b-96a4-a837f27af9ff"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 4,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}